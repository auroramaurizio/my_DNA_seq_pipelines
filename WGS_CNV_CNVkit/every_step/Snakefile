import sys
import os
import logging
from snakemake.io import glob_wildcards, expand
import csv
import pandas as pd
import numpy as np



path = "logs_slurm"
try:
    os.mkdir(path)
except OSError:
    print ("Creation of the directory %s failed" % path)
else:
    print ("Successfully created the directory %s " % path)

#absolute path of folder containing the .bam files
DATADIR_SHORT="/beegfs/scratch/ric.cosr/ric.cosr/../markdup"


#set of prefix of sample names 
#P = set(["PTCL_0010","PTCL_0020","PTCL_0030"])

P = set(["PTCL_0010"])

PATIENT = ' '.join(map(str, P))

print("PATIENT", PATIENT)


rule all:
    input:
        expand(['CNVKIT_PLOTS/{base}-scatter-region.pdf'], base=PATIENT.split(' ')),
        expand('CNVKIT_PLOTS/all_heatmap.pdf', base=PATIENT.split(' ')),
        expand('CNVKIT_PLOTS/all_heatmap_region.pdf', base=PATIENT.split(' ')),
        expand('CNVKIT_PLOTS/{base}-diagram.pdf', base=PATIENT.split(' ')),
        expand('CNVKIT_PLOTS/{base}-density.pdf', base=PATIENT.split(' ')),
        expand('CNVKIT_PLOTS/{base}-scatter.pdf', base=PATIENT.split(' '))
      



rule cnvkit_coverage_normal:
    input:
        BAM_NORMAL=os.path.join(DATADIR_SHORT, "{base}_NORM_DNA_markdup_only_marked.bam"),
    output:
        "CNVKIT_DATA/{base}_NORM_DNA_markdup_only_marked.targetcoverage.cnn"
    resources: time_min=5000, mem_mb=48000, cpus=36
    shell:
        "cnvkit.py coverage {input.BAM_NORMAL} -p 36 -o {output}"


rule cnvkit_coverage_tumor:
    input:
        BAM_TUMOR=os.path.join(DATADIR_SHORT, "{base}_DNA_markdup_only_marked.bam"),
    output:
        "{base}.CNVKIT/{base}_DNA_markdup_only_marked.targetcoverage.cnn"
    resources: time_min=5000, mem_mb=48000, cpus=36
    shell:
        "cnvkit.py coverage {input.BAM_TUMOR} -p 36 -o {output}"


#not included
rule cnvkit_anti_target_coverage_tumor:
    input:
        BAM_TUMOR=os.path.join(DATADIR_SHORT, "{base}_DNA_markdup_only_marked.bam"),
    output:
        "{tumor}.CNVKIT/{tumor}.antitargetcoverage.cnn"
    resources: time_min=5000, mem_mb=48000, cpus=36
    shell:
        "cnvkit.py coverage -p 10 {input.BAM_TUMOR} -p 36 -o {output}"




rule cnvkit_reference:
    input:
        REFERENCES=expand(["CNVKIT_DATA/{base}_NORM_DNA_markdup_only_marked.targetcoverage.cnn"], normal=PATIENT.split(' '))
    output:
        "CNVKIT_DATA/reference.cnn"
    resources: time_min=5000, mem_mb=48000, cpus=36
    shell:
        "cnvkit.py reference {input.REFERENCES} -p 36 -o {output}"




rule cnvkit_fix:
    input:
        TARGET_COVERAGE="{base}.CNVKIT/{base}_DNA_markdup_only_marked.targetcoverage.cnn",
        ANTITARGET="{base}.CNVKIT/{base}_DNA_markdup_only_marked.antitargetcoverage.cnn",
        REFERENCE_NORMALS="CNVKIT_DATA/reference.cnn"
    output:
        "{base}.CNVKIT/{base}.cnr"
    resources: time_min=5000, mem_mb=48000, cpus=36
    shell:
        "cnvkit.py fix {input.TARGET_COVERAGE} {input.ANTITARGET} {input.REFERENCE_NORMALS} --no-edge -o {output}"



rule cnvkit_segment:
    input:
        "{base}.CNVKIT/{base}_DNA_markdup_only_marked.cnr"
    output:
        "{base}.CNVKIT/{base}_DNA_markdup_only_marked.cns"
    resources: time_min=5000, mem_mb=48000, cpus=36
    shell:
        "cnvkit.py segment {input} -o {output}"


"""
cnvkit_call not taking into account ploidy
"""


rule cnvkit_call:
    input:
        "{base}.CNVKIT/{base}_DNA_markdup_only_marked.cns"
    output:
        "{base}.CNVKIT/{base}_DNA_markdup_only_marked.call.cns"
    resources: time_min=5000, mem_mb=48000, cpus=36
    shell:
        "cnvkit.py call -m clonal {input} -o {output}"




rule cnvkit_scatter:
    input:
        CNR="{base}.CNVKIT/{base}_DNA_markdup_only_marked.cnr",
        CNS="{base}.CNVKIT/{base}_DNA_markdup_only_marked.cns"
    output:
        "CNVKIT_PLOTS/{base}-scatter.pdf"
    resources: time_min=5000, mem_mb=48000, cpus=18
    params:
        "{base}-sting.CNVKIT/{base}.cns"
    shell:
        "cnvkit.py scatter {input.CNR} -s {input.CNS} -o {output}"


rule cnvkit_scatter_region:
    input:
        CNR="{base}.CNVKIT/{base}_DNA_markdup_only_marked.cnr",
        CNS="{base}.CNVKIT/{base}_DNA_markdup_only_marked.cns"
    output:
        "CNVKIT_PLOTS/{base}-scatter-region.pdf"
    resources: time_min=5000, mem_mb=48000, cpus=18
    shell:
        "cnvkit.py scatter {input.CNR} -s {input.CNS} -c chr7 -g gene,EGFR,BRAF,EZH2,RAC1,HDAC9,CDK6 --y-max 5 --y-min -3 -o {output}"


rule cnvkit_diagram:
    input:
        CNR="{base}.CNVKIT/{base}_DNA_markdup_only_marked.cnr",
        CNS="{base}.CNVKIT/{base}_DNA_markdup_only_marked.cns"
    output:
        "CNVKIT_PLOTS/{base}-diagram.pdf"
    resources: time_min=5000, mem_mb=48000, cpus=18
    shell:
        "cnvkit.py diagram {input.CNR} -s {input.CNS} -o {output}"


rule cnvkit_density:
    input:
        CNS="{base}.CNVKIT/{base}_DNA_markdup_only_marked.cns"
    output:
        PLOT="CNVKIT_PLOTS/{base}-density.pdf"
    resources: time_min=5000, mem_mb=48000, cpus=18
    run:
        import matplotlib.pyplot as plt
        TAS=pd.read_csv(input.CNS, sep='\t', header=(0))
        TAS['length']=TAS['end'] - TAS['start']
        print(len(TAS['length']))
        plt.hist(TAS['length'], color='steelblue',
                    edgecolor='none')
        plt.ticklabel_format(useOffset=False, style='plain')
        plt.xlabel('CNV width (bp)')
        plt.xticks(fontsize=6)
        plt.title('CNV width distribution')
        plt.savefig(output.PLOT)


rule cnvkit_heatmap:
    input:
        expand(["{base}.CNVKIT/{base}_DNA_markdup_only_marked.cns"], base=PATIENT.split(' '))
    output:
        "CNVKIT_PLOTS/all_heatmap.pdf"
    resources: time_min=5000, mem_mb=48000, cpus=18
    shell:
        "cnvkit.py heatmap {input} -o {output}"


rule cnvkit_heatmap_region:
    input:
        expand(["{base}.CNVKIT/{base}_DNA_markdup_only_marked.cns", "{base}.CNVKIT/{base}_DNA_markdup_only_marked.cnr"], base=PATIENT.split(' '))
    output:
        "CNVKIT_PLOTS/all_heatmap_region.pdf"
    resources: time_min=5000, mem_mb=48000, cpus=18
    shell:
        "cnvkit.py heatmap {input} -c chr7 -o {output}"



Ciao Giovanni,

Riguardo alla parte di pipeline sviluppata ti avevo risposto al commento sulle slide, ma non so se avevo colto in pieno il senso della tua domanda.




SÃ¬ stiamo procedendo con l'analisi CNV anche su Lung.



