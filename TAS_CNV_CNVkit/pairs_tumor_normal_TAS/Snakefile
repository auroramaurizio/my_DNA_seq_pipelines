import sys
import os
import logging
from snakemake.io import glob_wildcards, expand
import csv
import pandas as pd
import numpy as np


logging.basicConfig(
    filename="output.log", level=logging.DEBUG, filemode='w')

inputdir="/lustre2/scratch/amaurizio/ACC_DATA/BAM_FILES"
samplelist = []
discarded = []
size = 10000
target_file="targets.bed"
fish_file="Samples_Barcodes.txt"
fish_info =  pd.read_csv(fish_file, sep='\t', header=(0))
annotation="/lustre1/genomes/hg19/annotation/hg19.refFlat.txt"
#reference rmsk and gc content is important in wgs experiments and not TAS
#I'll use it here anyway just to see if the output changes
reference="/lustre1/genomes/hg19/fa/hg19.fa"
#https://pages.charlesreid1.com/how-do-i-snakemake/converting/

#condactivate pypette-dna
#run in a node with snakemake -rj 10


"""
# consider for the pipeline only bam files bigger than size
# put the filenames of the bam files (without extension) in a list
# convert the list to string
#divide in 2 groups tumor and normal

#run with snakemake --cluster qsub -j 10

"""

for file in os.listdir(inputdir):
    full_path = os.path.join(inputdir, file)
    filesize=os.path.getsize(full_path)
    if file.endswith('.bam') and filesize > size:
        samplelist.append(file.split(".")[0])
        logging.debug("good file: %s, size: %d ",file, filesize)
    elif file.endswith('.bam') and filesize < size:
        discarded.append(file.split(".")[0])
        logging.debug("bad file: %s, size: %d",file, filesize)
logging.debug("samplelist: %s,length: %d",samplelist,len(samplelist))
logging.debug("discarded: %s, length: %d",discarded,len(discarded))


T = [x for x in samplelist if '1TA' in x]
TUMOR = ' '.join(map(str, T))
logging.debug("TUMOR: %s",TUMOR)
logging.debug("N TUMORS: %d", len(T))
N = [x for x in samplelist if '2NAD' in x]
NORMAL = ' '.join(map(str, N))
logging.debug("NORMAL: %s",NORMAL)
logging.debug("N NORMALS: %d", len(N))
BASE=set()

for i in T:
    #print(i, "i")
    b=i.split('-')[0]
    BASE.add(b)
    if b=="lung14FKW2":
        print(i, "b")



for i in N:
    #print(i, "i")
    n=i.split('-')[0]
    if n=="lung14FKW2":
        print(i, "n")

#print(BASE,"BASE")

BASENAME = ' '.join(map(str, BASE))
print(BASENAME, "BASENAME")
#print(BASENAME.split(' '), "BASENAme split")
normsuf="-sting"
tumsuf="-2NAD114"

"""

T = [x for x in samplelist if '1TA' in x]
N = [x for x in samplelist if '2NAD' in x]

# execute only on a subset of the dataset (2Tumors and 2Normals)

T_2samples = T[0:2]
N_2samples = N[0:2]

TUMOR = ' '.join(map(str, T_2samples))
logging.debug("TUMOR sub: %s", TUMOR)
logging.debug("N TUMORS sub: %d", len(T_2samples))

NORMAL = ' '.join(map(str, N_2samples))
logging.debug("NORMAL sub: %s", NORMAL)
logging.debug("N NORMALS sub: %d", len(N_2samples))

BASE=set()

for i in T_2samples:
    #print(i, "i")
    b=i.split('-')[0]
    BASE.add(b)
    if b=="lung14FKW2":
        print(i, "b")



for i in N_2samples:
    #print(i, "i")
    n=i.split('-')[0]
    if n=="lung14FKW2":
        print(i, "n")

#print(BASE,"BASE")

BASENAME = ' '.join(map(str, BASE))
print(BASENAME, "BASENAME")
#print(BASENAME.split(' '), "BASENAme split")
normsuf="-sting"
tumsuf="-2NAD114"


"""


# ignore errors
shell.prefix("set +o pipefail; ")

"""So far, we always executed the workflow by specifying a target file at the
command line. Apart from filenames, Snakemake also accepts rule names as
targets if the referred rule does not have wildcards. Hence, it is possible
to write target rules collecting particular subsets of the desired results or
all results. Moreover, if no target is given at the command line,
Snakemake will define the first rule of the Snakefile as the target.
Hence, it is best practice to have a rule all at the top of the workflow
which has all typically desired target files as input files.

Define in "rule all" all the ouput files you want to obtain.
The intermediate files necessary to obtain these output files will be
automatically generated.
"""
rule all:
    input:
       expand('{base}-sting.CNVKIT/{base}-sting.targetcoverage.cnn', base=BASENAME.split(' ')),
       expand("CNVKIT_DATA/{base}-2NAD114.targetcoverage.cnn", base=BASENAME.split(' ')),
       expand("{base}-sting.CNVKIT/{base}-sting.cnr", base=BASENAME.split(' ')),
       expand("{base}-sting.CNVKIT/{base}-sting.cns", base=BASENAME.split(' ')),
       expand('CNVKIT_PLOTS/{base}-sting-diagram.pdf', base=BASENAME.split(' ')),
       expand('CNVKIT_PLOTS/{base}-sting-scatter.pdf', base=BASENAME.split(' ')),
       expand('CNVKIT_PLOTS/{base}-sting-scatter-region.pdf', base=BASENAME.split(' ')),
       expand('CNVKIT_PLOTS/all_heatmap_region.pdf', base=BASENAME.split(' ')),
       expand('CNVKIT_PLOTS/all_heatmap.pdf', base=BASENAME.split(' ')),
       expand('CNVKIT_PLOTS/{base}-sting-density.pdf', base=BASENAME.split(' ')),
       expand('{base}-sting.CNVKIT/{base}-sting.call.num_genes.cns', base=BASENAME.split(' ')),
       expand('{base}-sting.CNVKIT/{base}-sting.call.genes.tsv', base=BASENAME.split(' ')),
       expand('{base}-sting.CNVKIT/{base}-sting.call.genes.collapse.tsv', base=BASENAME.split(' ')),
       expand('{base}-sting.CNVKIT/{base}-sting.call.gene.tsv', base=BASENAME.split(' ')),
       #expand('{base}-ITAD114.CNVKIT/{base}-ITAD114.call.gene.fish_GAIN.tsv', base=BASENAME.split(' ')),
       "CNVKIT_DATA/metrics.txt",
       "gene_summary.tsv"



"""Targeted Amplicon Sequencing with cnvkit (TAS)

WITH ANNOTATION FILE Flagstat.txt

When amplicon sequencing is used as a targeted capture method, no off-target
reads are sequenced. While this limits the copy number information available in
the sequencing data versus hybrid capture, CNVkit can analyze TAS data using
only on-target coverages and excluding all off-target regions from the analysis.
This approach does not collect any copy number information between targeted
regions, so it should only be used if you have in fact prepared your samples
with a targeted amplicon sequencing protocol. It also does not attempt to
further normalize each amplicon at the gene level, though this may be addressed
in a future version of CNVkit.


IMPORTANT: Do not mark duplicates in the BAM files for samples sequenced by
this method.

"""


"""
step1) Format thei targets

            Parameters
            -------

            interval : BED or interval file listing the targeted regions.
             --split   Split large tiled intervals into smaller, consecutive
                       targets.

"""


rule cnvkit_target:
    input:
        target_file
    output:
        "CNVKIT_DATA/targets.split.bed"
    params:
        annotation
    shell:
        "cnvkit.py target {input} --annotate {params} --split -o {output}"


#snakemake CNVKIT_DATA/targets.split.bed


""" step2) Create a fake-empty antitarget
"""

rule cnvkit_antitarget:
    output:
        "CNVKIT_DATA/antitarget.cnn"
    shell:
        "touch {output}"

""" It is possible to do everything simply with the batch command instead.

rule cnvkit_batch:
    input:
        BAM_TUMOR = os.path.join(inputdir, "{base}-sting.bam")
        BAM_NORMAL=os.path.join(inputdir, "{base}-2NAD114.bam")
    output:
        "CNVKIT_DATA/{base}-2NAD114.target-tmp.bed",
        "CNVKIT_DATA/{base}-2NAD114.antitarget-tmp.bed",
        "{base}-sting.CNVKIT/{base}-sting.targetcoverage.cnn",
        "{base}-sting.CNVKIT/{base}-sting.antitargetcoverage.cnn",
        "{base}-sting.CNVKIT/{base}-sting.cnr",
        "{base}-sting.CNVKIT/{base}-sting.cns"
    params:
        FOLDER="{base}-sting.CNVKIT",
        TARGET=target_file,
    shell:
        "cnvkit.py batch -m hmm-tumor -p 10  -t {params.TARGET} -n {input.BAM_NORMAL} --output-dir {params.FOLDER} {input.BAM_TUMOR}"
"""


"""step3.1) Calculate coverage in the given regions from BAM read depths - TUMOR

            Parameters
            -------
            bam_file : Tumor Mapped sequence reads (.bam)
            interval : Intervals (.bed or .list)


            Returns
            -------
            for each TUMOR sample the coverage (.cnn)
"""


rule cnvkit_target_coverage_tumor:
    input:
        BAM_TUMOR=os.path.join(inputdir, "{base}-sting.bam"),
        TARGET="CNVKIT_DATA/targets.split.bed"
    output:
        "{base}-sting.CNVKIT/{base}-sting.targetcoverage.cnn"
    shell:
        "cnvkit.py coverage -p 10 -o {output} {input.BAM_TUMOR} {input.TARGET}"



rule cnvkit_anti_target_coverage_tumor:
    input:
        BAM_TUMOR=os.path.join(inputdir, "{base}-sting.bam"),
        ANTITARGET="CNVKIT_DATA/antitarget.cnn"
    output:
        "{base}-sting.CNVKIT/{base}-sting.antitargetcoverage.cnn"
    shell:
        "cnvkit.py coverage -p 10 -o {output} {input.BAM_TUMOR} {input.ANTITARGET}"




"""step3.2) Calculate coverage in the given regions from BAM read depths - NORMAL

            Parameters
            -------
            bam_file : Normal Mapped sequence reads (.bam)
            interval : Intervals (.bed or .list)


            Returns
            -------
            for each NORMAL sample the coverage (.cnn)

"""


rule cnvkit_coverage_normal:
    input:
        BAM_NORMAL=os.path.join(inputdir, "{base}-2NAD114.bam"),
        TARGET="CNVKIT_DATA/targets.split.bed"
    output:
        "CNVKIT_DATA/{base}-2NAD114.targetcoverage.cnn"
    shell:
        "cnvkit.py coverage {input.BAM_NORMAL} {input.TARGET} -p 12 -o {output}"


#snakemake CNVKIT_DATA/{normal}.targetcoverage.cnn


#-f ucsc.hg19.fa -o Reference.cnn






"""step4) Build a reference from normal samples

        Parameters
        -------

        references : List of normal-sample target or antitarget .cnn files, or the
            directory that contains them. (We want use normal-samples)

        Returns
        -------
        reference from normal samples

"""

rule cnvkit_reference:
    input:
        REFERENCE="CNVKIT_DATA/{base}-2NAD114.targetcoverage.cnn"
    #params:
        #GENOME=reference
    output:
        "CNVKIT_DATA/{base}-reference.cnn",
    shell:
        #"cnvkit.py reference {input.REFERENCE} -f {params.GENOME} -o {output}"
        "cnvkit.py reference {input.REFERENCE} -o {output}"


rule cnvkit_fix:
    input:
        TARGET_COVERAGE="{base}-sting.CNVKIT/{base}-sting.targetcoverage.cnn",
        ANTITARGET="{base}-sting.CNVKIT/{base}-sting.antitargetcoverage.cnn",
        REFERENCE_NORMALS="CNVKIT_DATA/{base}-reference.cnn"
    output:
        "{base}-sting.CNVKIT/{base}-sting.cnr"
    shell:
        "cnvkit.py fix {input.TARGET_COVERAGE} {input.ANTITARGET} {input.REFERENCE_NORMALS} --no-edge -o {output}"



rule cnvkit_segment:
    input:
        "{base}-sting.CNVKIT/{base}-sting.cnr"
    output:
        "{base}-sting.CNVKIT/{base}-sting.cns"
    shell:
        "cnvkit.py segment -m hmm-tumor {input} -o {output}"



rule cnvkit_metrics:
    input:
        expand(["{base}-sting.CNVKIT/{base}-sting.cnr"], base=BASENAME.split(' '))
    #params:
    #    expand(["{base}-sting.CNVKIT/{base}-sting.cns"], base=BASENAME.split(' '))
    output:
        "CNVKIT_DATA/metrics.txt"
    shell:
        "cnvkit.py metrics {input} -o {output}"



#Calling copy number with thresholds: -1.1 => 0, -0.25 => 1, 0.2 => 2, 0.7 => 3
rule cnvkit_call:
    input:
        "{base}-sting.CNVKIT/{base}-sting.cns"
    output:
        "{base}-sting.CNVKIT/{base}-sting.call.cns"
    shell:
        "cnvkit.py call {input} -o {output}"



rule cnvkit_scatter:
    input:
        CNR="{base}-sting.CNVKIT/{base}-sting.cnr",
        CNS="{base}-sting.CNVKIT/{base}-sting.cns"
    output:
        "CNVKIT_PLOTS/{base}-sting-scatter.pdf"
    params:
        "{base}-sting.CNVKIT/{base}-sting.cns"
    shell:
        "cnvkit.py scatter {input.CNR} -s {input.CNS} -o {output}"


rule cnvkit_scatter_region:
    input:
        CNR="{base}-sting.CNVKIT/{base}-sting.cnr",
        CNS="{base}-sting.CNVKIT/{base}-sting.cns"
    output:
        "CNVKIT_PLOTS/{base}-sting-scatter-region.pdf"
    shell:
        "cnvkit.py scatter {input.CNR} -s {input.CNS} -c chr7 -g gene,EGFR,BRAF,EZH2,RAC1,HDAC9,CDK6 --y-max 5 --y-min -3 -o {output}"


rule cnvkit_diagram:
    input:
        CNR="{base}-sting.CNVKIT/{base}-sting.cnr",
        CNS="{base}-sting.CNVKIT/{base}-sting.cns"
    output:
        "CNVKIT_PLOTS/{base}-sting-diagram.pdf"
    shell:
        "cnvkit.py diagram {input.CNR} -s {input.CNS} -o {output}"


rule cnvkit_density:
    input:
        CNS="{base}-sting.CNVKIT/{base}-sting.cns"
    output:
        PLOT="CNVKIT_PLOTS/{base}-sting-density.pdf"
    run:
        import matplotlib.pyplot as plt
        TAS=pd.read_csv(input.CNS, sep='\t', header=(0))
        #print(TAS.head())
        TAS['length']=TAS['end'] - TAS['start']
        print(len(TAS['length']))
        plt.hist(TAS['length'], color='steelblue',
                    edgecolor='none')
        plt.ticklabel_format(useOffset=False, style='plain')
        plt.xlabel('CNV width (bp)')
        plt.xticks(fontsize=6)
        plt.title('CNV width distribution')
        #plt.show()
        plt.savefig(output.PLOT)



rule cnvkit_heatmap:
    input:
        expand(["{base}-sting.CNVKIT/{base}-sting.cns"], base=BASENAME.split(' '))
    output:
        "CNVKIT_PLOTS/all_heatmap.pdf"
    shell:
        "cnvkit.py heatmap {input} -o {output}"


rule cnvkit_heatmap_region:
    input:
        expand(["{base}-sting.CNVKIT/{base}-sting.cns", "{base}-sting.CNVKIT/{base}-sting.cnr"], base=BASENAME.split(' '))
    output:
        "CNVKIT_PLOTS/all_heatmap_region.pdf"
    shell:
        "cnvkit.py heatmap {input} -c chr7 -o {output}"




"""
count genes in cns
"""

rule count_genes_in_cns:
    input:
        TAS_data="{base}-sting.CNVKIT/{base}-sting.call.cns"
    output:
        "{base}-sting.CNVKIT/{base}-sting.call.num_genes.cns"
    run:
        import pandas as pd
        TAS=pd.read_csv(input.TAS_data, sep='\t', header=(0))
        TAS['gene_num']=TAS['gene'].apply(lambda x: len(x.split(',')))
        TAS.to_csv(output[0], sep='\t', index=False)


"""
explode "gene" column
"""

rule explode_gene:
    input:
        "{base}-sting.CNVKIT/{base}-sting.call.num_genes.cns"
    output:
        ALL_GENES="{base}-sting.CNVKIT/{base}-sting.call.genes.tsv"
    shell:
        """
        awk '{{ split($4,a,","); \
        for (i in a) print $1"\t"$2"\t"$3"\t"$5"\t"$6"\t"$7"\t"$8"\t"$10"\t"a[i]"\t"$1"_"$2"_"$3; }}' \
        {input} > {output.ALL_GENES}

        """


"""
collapse according to gene name (remove the target suffix)
"""

rule collapse_gene:
    input:
        TAS_data="{base}-sting.CNVKIT/{base}-sting.call.genes.tsv"
    output:
        ALL_GENES="{base}-sting.CNVKIT/{base}-sting.call.genes.collapse.tsv"
    run:
        import pandas as pd
        TAS=pd.read_csv(input.TAS_data, sep='\t', header=(0))
        TAS['gene'] = TAS['gene'].apply(lambda x: x.split('_')[0])
        TAS_dd = TAS.drop_duplicates()
        TAS_dd.to_csv(output[0], sep='\t', index=False)
"""
select only lines containg gene gene
"""

rule get_gene:
    input:
        "{base}-sting.CNVKIT/{base}-sting.call.genes.collapse.tsv"
    output:
        GENE="{base}-sting.CNVKIT/{base}-sting.call.gene.tsv"
    shell:
        """
        awk 'NR==1 ||\
        $9 ~ /gene/ {{ print $1"\t"$2"\t"$3"\t"$4"\t"$5"\t"$6"\t"$7"\t"$8"\t"$9"\t"$10}}'  \
        {input} > {output.GENE}
        """


"""
Identify targeted genes with copy number gain or loss (above or below a threshold)
"""

rule genemetrics:
    input:
        CNS="{base}-sting.CNVKIT/{base}-sting.cns",
        CNR="{base}-sting.CNVKIT/{base}-sting.cnr"
    output:
        GAINLOSS="{base}-sting.CNVKIT/{base}-sting.gene.gainloss.txt"
    shell:
        """
        cnvkit.py genemetrics -y {input.CNR} -s {input.CNS} > {output.GAINLOSS}
        """



"""
compare cnv and fish data - GAIN in both TAS and fish
"""

rule compare_cnvkit_fish:
    input:
        TAS_data="{base}-sting.CNVKIT/{base}-sting.call.gene.tsv"
    output:
        "{base}-sting.CNVKIT/{base}-sting.call.gene.fish_GAIN.tsv"
    params:
        FISH=fish_info
    run:
        TAS=pd.read_csv(input.TAS_data, sep='\t', header=(0))
        print(wildcards.base)
        TAS['id'] = wildcards.base + "-sting"
        merged_inner = pd.merge(left=TAS, right=params.FISH, left_on='id', right_on='Tumor_Sample_Barcode')
        conditions = [(pd.to_numeric(merged_inner['cn']) > 2) & (pd.to_numeric(merged_inner['NewMet']) >= 4)]
        choices = ['TRUE']
        merged_inner['MATCH_GAIN'] = np.select(conditions, choices, default='FALSE')
        merged_inner.to_csv(output[0], sep='\t', index=False)


"""
compare cnv and fish data - LOSS in both TAS and fish
"""

rule compare_cnvkit_fish_l:
    input:
        TAS_data="{base}.CNVKIT/{base}.call.gene.fish_GAIN.tsv"
    output:
        "{base}.CNVKIT/{base}.call.gene.fish_GL.tsv"
    run:
        TAS=pd.read_csv(input.TAS_data, sep='\t', header=(0))
        conditions = [ (pd.to_numeric(TAS['cn']) < 2) & (pd.to_numeric(TAS['NewMet']) < 4)]
        choices = ['TRUE']
        TAS['MATCH_LOSS'] = np.select(conditions, choices, default='FALSE')
        TAS.to_csv(output[0], sep='\t', index=False)



"""
merge data
"""
rule summary:
    input:
        expand(["{base}-sting.CNVKIT/{base}-sting.call.gene.fish_GL.tsv"], base=BASENAME.split(' '))
    output:
        "gene_summary.tsv"
    run:
        frames=[]
        for file in input:
            frames.append(pd.read_csv(file, sep='\t', header=(0), engine='python'))
        result = pd.concat(frames)
        result['length'] = result['end'] - result['start']
        result.to_csv(output[0], sep='\t', index=False)

