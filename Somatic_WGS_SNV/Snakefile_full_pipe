import sys
import logging
from snakemake.io import glob_wildcards, expand
import glob,os
import pathlib
import csv
import pandas as pd
import numpy as np

#import multiqc

DATADIR_SHORT="/../"


DATADIR_SHORT = "PATH/TO/DIRECTORY/WHERE/MY/FASTQ/ARE/STORED"


SAMPLE_LIST_DIR = os.listdir(DATADIR_SHORT)

runs_set = set(["211005_A00626_0345_AHKLVHDRXY"])
runs = ' '.join(map(str, runs_set))


SUFF = []
SAMPLELIST = []


for file in SAMPLE_LIST_DIR:
    A = file.split("_")[0]
    B = file.split("_")[1]
    C = A + '_' + B
    SUFF.append(C)
    SAMPLELIST.append(A)


e.g. SUFF = ["SAMP1_T","SAMP1_C","SAMP2_T","SAMP2_C"]
e.g. SAMPLELIST = ["SAMP1",SAMP2"]


SAMPLELIST=set(SAMPLELIST)
SUFF=set(SUFF)

#print(SUFF)
#print(SAMPLELIST)

SUFFIX = ' '.join(map(str, SUFF))
print("SUFFIX", SUFFIX)

SAMPLELIST = ' '.join(map(str, SAMPLELIST))
print("SAMPLELIST", SAMPLELIST)


def get_rgidfromrun(run):
    return str(run.split("_")[3])

path = "logs_slurm"
try:

    os.mkdir(path)
except OSError:
    print ("Creation of the directory %s failed" % path)
else:
    print ("Successfully created the directory %s " % path)




rule all:
    input:

     # expand(["qc/{pref}"], pref=SUFFIX.split(' ')),
     # expand(["mapped/{pref}.bam"], pref=SUFFIX.split(' ')),
     # expand(["sorted/{pref}.bam"], pref=SUFFIX.split(' ')),
     # expand(["markdup/{pref}_markdup.bam","markdup/{pref}_markdup_metrics.log"], pref=SUFFIX.split(' ')),
     # expand(["sorted/{pref}_markdup.bam"], pref=SUFFIX.split(' ')),
     # expand(["sorted/{pref}_markdup.bam.bai"], pref=SUFFIX.split(' ')),
     # expand(["qualimap/{pref}"], pref=SUFFIX.split(' ')),
     # expand(["recalib_C/{sample}_C_recal_cpu.txt"], sample=SAMPLELIST.split(' ')),
     # expand(["recalib_T/{sample}_T_recal_cpu.txt"], sample=SAMPLELIST.split(' ')),
     # expand(["BQSR_C/{sample}_PB_recal.bam"], sample=SAMPLELIST.split(' ')),
     # expand(["BQSR_T/{sample}_T_recal.bam"], sample=SAMPLELIST.split(' ')),
     # expand(["BQSR_C/{sample}_PB_recal.vcf"], sample=SAMPLELIST.split(' ')),
     # expand(["CALL/{sample}_somatic.vcf.gz"], sample=SAMPLELIST.split(' ')),
     # expand(["COSMIC/{sample}_somatic.COSMIC.vcf"], sample=SAMPLELIST.split(' ')),
     # expand(["COSMIC/{sample}_somatic.filtered.COSMIC.vcf"], sample=SAMPLELIST.split(' ')),
     # expand(["FUNCOTATOR/{sample}_somatic.filtered.COSMIC.funcotator.vcf.gz"], sample=SAMPLELIST.split(' ')),
     # expand(["FUNCOTATOR/{sample}_somatic.filtered.COSMIC.funcotator.maf.gz"], sample=SAMPLELIST.split(' '))
     # expand(["hsmetrics/{pref}_hs_metrics.txt"], pref=SUFFIX.split(' '))  
     # expand(["MAF/{sample}_somatic.filtered.COSMIC.funcotator.maf"], sample=SAMPLELIST.split(' '))


rule mergeFastq:
    output:
        R1 = "MERGED/{pref}_R1.fastq.gz",
        R2 = "MERGED/{pref}_R2.fastq.gz"
    params: DATADIR_SHORT
    resources: time_min = 500, mem_mb=2500, cpus = 2
    shell: """
        mkdir -p MERGED
        cat {params}/{wildcards.pref}/{wildcards.pref}_S*_R1_001.fastq.gz > {output.R1}
        cat {params}/{wildcards.pref}/{wildcards.pref}_S*_R2_001.fastq.gz > {output.R2}
        """

rule fastqc:
    input:
        R1 = "MERGED/{pref}_R1.fastq.gz",
        R2 = "MERGED/{pref}_R2.fastq.gz"
    output:
        directory("qc/{pref}")
    params: ""
    log:
        "logs/fastqc/{pref}.log"
    threads: 12
    resources: time_min = 50000, mem_mb=25000, cpus = 32
    shell:"""
        mkdir -p "qc/{wildcards.pref}"
        fastqc -o {output} {input.R1} {input.R2}
        """




########################################################
# correct the problem of bad quality tiles
# we can have bad quality tiles when there is dirt, dust,
# bubbles on the flowcell or it is overloaded.
# bad quality tiles can results in artefact insertions
# and deletions during variant calling.

########################################################

rule tiles_r1_hard:
    input:
        R1="MERGED/{pref}_R1.fastq.gz"
    output:
        R1="tiles_h/{pref}_R1.fastq.gz"
    threads: 12
    resources: time_min=50000, mem_mb=64000, cpus=32
    shell:"""
        mkdir -p tiles_h
        filterbytile.sh in={input.R1} out={output.R1} ud=0.75 qd=1 ed=1 ua=.5 qa=.5 ea=.5
       """


rule tiles_r2_hard:
    input:
        R2="MERGED/{pref}_R2.fastq.gz"
    output:
        R2="tiles_h/{pref}_R2.fastq.gz"
    threads: 12
    resources: time_min=50000, mem_mb=64000, cpus=32
    shell:"""
        mkdir -p tiles_h
        filterbytile.sh in={input.R2} out={output.R2} ud=0.75 qd=1 ed=1 ua=.5 qa=.5 ea=.5
       """

#######################################
# remove bad quality nucleotides at the 
# beginning of the read as well as 
# residues of adapters, primers etc.
#######################################


rule trimming:
    input:
        R1="tiles_h/{pref}_R1.fastq.gz",
        R2="tiles_h/{pref}_R2.fastq.gz",
        adapters = "adapters-pe.fa"
    output:
        R1="trimmed/{pref}_R1.fastq.gz",
        R2="trimmed/{pref}_R2.fastq.gz"
    log:
        main="trimmed/{pref}_trim.log",
        out="trimmed/{pref}_trimout.log"
    threads: 12
    resources: time_min=50000, mem_mb=64000, cpus=32
    shell:"""
        mkdir -p trimmed
        bbduk.sh -Xmx24g in={input.R1} in2={input.R2} out={output.R1} out2={output.R2} ref={input.adapters} k=23 mink=11 rcomp=t ktrim=f kmask=X qtrim=rl trimq=5 forcetrimleft=5 forcetrimright2=0  overwrite=true stats={log.main}  2> "{log.out}"

       """



rule map:
    input:
        R1 = "trimmed/{pref}_R1.fastq.gz",
        R2 = "trimmed/{pref}_R2.fastq.gz",
        reference = "GRCh38_Verily/bwa-0.7.12/GRCh38_Verily_v1.genome.fa"
    params:
        id = lambda wildcards: get_rgidfromrun(f"211005_A00626_0345_AHKLVHDRXY"),
        pu=lambda wildcards: f"211005_A00626_0345_AHKLVHDRXY.{wildcards.pref}",
        sm=lambda wildcards: f"{wildcards.pref}",
        pl="NextSeq500"
        #lb = lambda wildcards:get_rgidfromrun(f"211005_A00626_0345_AHKLVHDRXY").f"{wildcards.pref}"
    output:
        "mapped/{pref}.bam"
    threads: 72
    resources: time_min=50000, mem_mb=25000, cpus=72
    shell:"""

       bwa mem -t 72 -M -R '@RG\\tID:{params.id}.{params.sm}\\tPL:{params.pl}\\tPU:{params.pu}\\tSM:{params.sm}\\tLB:{params.id}.{params.sm}\\tCN:COSR\\tSO:unsorted' {input.reference} {input.R1} {input.R2} | samtools view -Sb > {output}

       """



rule samtools_sort_map:
    input:
        "mapped/{pref}.bam"
    output:
        "sorted/{pref}_sorted.bam"
    resources: time_min = 5000, mem_mb=25000, cpus = 32
    shell:"""
        mkdir -p sorted
        samtools sort {input} -o {output}
        """



#if you need to perform the somatic calling with Mutect2 flag, don't remove the duplicated
rule rmdup_only_marked:
    input:
        "sorted/{pref}_sorted.bam"
    output:
        reads = "markdup/{pref}_markdup_only_marked.bam",
        metrics = "markdup/{pref}_markdup_metrics.log"
    resources: time_min=5000, mem_mb=2500, cpus=36
    shell:"""
       mkdir -p markdup
       picard MarkDuplicates REMOVE_DUPLICATES=false\
       I={input} \
       O={output.reads} \
       M={output.metrics}
       """



rule samtools_sort_only_marked:
    input:
        "markdup/{pref}_markdup_only_marked.bam"
    output:
        "sorted/{pref}_markdup_only_marked.bam"
    resources: time_min = 5000, mem_mb=25000, cpus = 32
    shell:"""
        mkdir -p sorted
        samtools sort {input} -o {output}
        """

#######################################
# Correct the effect of overlapping FW 
# and REV readswhen the IS is too short
#######################################


rule clipOverlap:
    input:
        BAM = "sorted/{pref}_markdup.bam"
    output:
        "clipOverlap/{pref}_markdup.bam"
    resources: time_min = 500, mem_mb=2500, cpus = 16
    shell:"""
        mkdir -p clipOverlap
        bam clipOverlap --in {input.BAM} --out {output} --stats --unmapped --storeOrig
        touch {output}
        """



rule clipOverlap_index:
    input:
        BAM = "clipOverlap/{pref}_markdup.bam"
    output:
        "clipOverlap/{pref}_markdup.bam.bai"
    resources: time_min = 500, mem_mb=2500, cpus = 16
    shell:"""
        samtools index {input.BAM}
        touch {output}
        """






###################################
# Recalibration of T and C samples
###################################

# here we switch from {pref} to {sample}


rule recalibC:
    input:
        bam = DATADIR_SHORT+"/clipOverlap/{sample}_C_markdup_only_marked.bam",
        ref_fasta = "GRCh38_Verily/bwa-0.7.12/GRCh38_Verily_v1.genome.fa",
        known_sites = "Homo_sapiens_assembly38.known_indels.vcf.gz"
    output:
        recal = "recalib/{sample}_C_recal_cpu.txt"
    resources: time_min=5000, mem_mb=48000, cpus=18
    shell:
        """
        gatk BaseRecalibrator --java-options -Xmx30g --input {input.bam} --output \
        {output.recal} --known-sites {input.known_sites} \
        --reference {input.ref_fasta}
        """


rule recalibT:
    input:
        bam = DATADIR_SHORT+"/clipOverlap/{sample}_T_markdup_only_marked.bam",
        ref_fasta = "GRCh38_Verily/bwa-0.7.12/GRCh38_Verily_v1.genome.fa",
        known_sites = "Homo_sapiens_assembly38.known_indels.vcf.gz"
    output:
        recal = "recalib_T/{sample}_T_recal_cpu.txt"
    resources: time_min=5000, mem_mb=48000, cpus=18
    shell:
        """
        gatk BaseRecalibrator --java-options -Xmx30g --input {input.bam} --output \
        {output.recal} --known-sites {input.known_sites} \
        --reference {input.ref_fasta}
        """


rule applyBQSRC:
    input:
        bam = DATADIR_SHORT+"/clipOverlap/{sample}_C_markdup_only_marked.bam",
        ref_fasta = "GRCh38_Verily/bwa-0.7.12/GRCh38_Verily_v1.genome.fa",
        recal = "recalib/{sample}_C_recal_cpu.txt"
    output:
        bam = "BQSR/{sample}_C_recal.bam"
    resources: time_min=5000, mem_mb=48000, cpus=18
    shell:
        """
        gatk ApplyBQSR --java-options -Xmx30g -R {input.ref_fasta} \
        -I {input.bam} --bqsr-recal-file {input.recal} -O {output.bam}
        """

rule applyBQSRT:
    input:
        bam = DATADIR_SHORT+"/clipOverlap/{sample}_T_markdup_only_marked.bam",
        ref_fasta = "GRCh38_Verily_AM/GRCh38_Verily/bwa-0.7.12/GRCh38_Verily_v1.genome.fa",
        recal = "recalib_T/{sample}_T_recal_cpu.txt"
    output:
        bam = "BQSR_T/{sample}_T_recal.bam"
    resources: time_min=5000, mem_mb=48000, cpus=18
    shell:
        """
        gatk ApplyBQSR --java-options -Xmx30g -R {input.ref_fasta} \
        -I {input.bam} --bqsr-recal-file {input.recal} -O {output.bam}
        """


###############################
# panel of normal creation
###############################



rule GatkMutect2:
    input:
        bam = "BQSR/{sample}_C_recal.bam",
        ref_fasta = "GRCh38_Verily/bwa-0.7.12/GRCh38_Verily_v1.genome.fa",
    output:
        vcf = "BQSR/{sample}_C_recal.vcf"
    resources: time_min=5000, mem_mb=48000, cpus=18
    shell:
        """
        gatk Mutect2 -R {input.ref_fasta} -I {input.bam} -max-mnp-distance 0 -O {output.vcf} 
        """





#rule genomics_db_import:
#    input:
#        A = ["BQSR/1.vcf"],
#        B = ["BQSR/2.vcf"],
#        C = ["BQSR/3.vcf"],
#        D = ["BQSR/4.vcf"],
#        E = ["BQSR/5.vcf"],
#        F = ["BQSR/6.vcf"],
#        G = ["BQSR/7.vcf"],
#        ref_fasta = "GRCh38_Verily/bwa-0.7.12/GRCh38_Verily_v1.genome.fa"
#    output:
#        db = directory("pon_dbs")
#    resources: time_min=50000, mem_mb=128000, cpus=32
#    shell:
#        """
#        gatk GenomicsDBImport -R {input.ref_fasta} -V {input.A} -V {input.B} -V {input.C} -V {input.D} -V {input.E} -V {input.F} -V {input.G} --genomicsdb-workspace-path {output.db}
#        touch {output.db} --merge-input-intervals
#        """



rule genomics_db_import:
    input:
        samplenamemap = "cohort.sample_map",
        ref_fasta = "GRCh38_Verily/bwa-0.7.12/GRCh38_Verily_v1.genome.fa"
    params:
        tmpdir = "/beegfs/scratch/tmp" 
    output:
        db = directory("pon_dbs")
    resources: time_min=50000, mem_mb=128000, cpus=7
    shell:
        """
        gatk GenomicsDBImport -R {input.ref_fasta} --sample-name-map {input.samplenamemap} --genomicsdb-workspace-path {output.db} --merge-input-intervals --reader-threads 7 --tmp-dir {params.tmpdir}
        touch {output.db}
        """



rule PON:
    input:
        args = "pon_dbs",
        ref_fasta = "GRCh38_Verily/bwa-0.7.12/GRCh38_Verily_v1.genome.fa"
    params:
        args = "gendb://pon_dbs"
    output:
        vcf = "pon.vcf.gz"
    resources: time_min=50000, mem_mb=128000, cpus=32
    shell:
        """
        export TILEDB_DISABLE_FILE_LOCKING=1
        gatk CreateSomaticPanelOfNormals -R {input.ref_fasta} -O {output.vcf} -V {params.args}
        """

#add -L --intervals interval parameter for WES calling
#gatk GetSampleName -I sample.bam -O sample_name.txt #if in doubt about sample name


rule Tumor_matched_Normal: 
    input:
        tumor = "BQSR_T/{sample}_T_recal.bam",
        normal = "BQSR/{sample}_C_recal.bam",
        pon = "pon.vcf.gz",
        ref_fasta = "GRCh38_Verily/bwa-0.7.12/GRCh38_Verily_v1.genome.fa"
    params:
        normal = "{sample}_C",
        germres = "af-only-gnomad.hg38.vcf.gz",
        tmpdir = "/beegfs/scratch/tmp"
    output:  
        vcf = "{sample}_somatic.vcf.gz"
    resources: time_min=50000, mem_mb=128000, cpus=32
    shell:
        """
        export TILEDB_DISABLE_FILE_LOCKING=1
        gatk Mutect2 -R {input.ref_fasta} -I {input.tumor} -I {input.normal} -normal {params.normal} --germline-resource {params.germres} --panel-of-normals {input.pon} -O {output.vcf} --tmp-dir {params.tmpdir} --native-pair-hmm-threads 4 --dont-use-soft-clipped-bases true
        """


#########################################
# filter mutect calls - tag PASS variants
#########################################


rule Annotat_Cosmic:
    input:
        vcf = "CALL/{sample}_somatic.vcf.gz"
    params:
        cosmic = "CosmicCodingMuts.normal.vcf.gz"
    output:
        vcf = "COSMIC/{sample}_somatic.COSMIC.vcf"
    resources: time_min=50000, mem_mb=128000, cpus=8
    shell:
        """
        mkdir -p COSMIC
        zcat {input.vcf}| SnpSift annotate  -info "COSMIC" {params.cosmic} > {output.vcf}
        """


rule Filter:
    input:
        genome = "GRCh38_Verily/bwa-0.7.12/GRCh38_Verily_v1.genome.fa",
        tumor = "{sample}_somatic.vcf.gz"
    params:
        tmpdir = "/beegfs/scratch/tmp"
    output:
        vcf = "{sample}_somatic_filtered.vcf.gz"
    resources: time_min=50000, mem_mb=128000, cpus=32
    shell:
        """
        export TILEDB_DISABLE_FILE_LOCKING=1
        gatk FilterMutectCalls -R {input.genome} -V {input.tumor} -O {output.vcf} --tmp-dir {params.tmpdir}
        """

################################
# annotate with cosmic
################################


rule Annotat_Cosmic_filtered:
    input:
        vcf = "CALL/{sample}_somatic.filtered.vcf.gz"
    params:
        cosmic = "CosmicCodingMuts.normal.vcf.gz"
    output:
        vcf = "COSMIC/{sample}_somatic.filtered.COSMIC.vcf"
    resources: time_min=50000, mem_mb=128000, cpus=8
    shell:
        """
        mkdir -p COSMIC
        zcat {input.vcf}| SnpSift annotate  -info "COSMIC" {params.cosmic} > {output.vcf}
        """





##################################
# funcotator VCF
#################################


rule FuncotatorVCF:
    input:
        genome = "GRCh38_Verily/bwa-0.7.12/GRCh38_Verily_v1.genome.fa",
        vcf = "COSMIC/{sample}_somatic.filtered.COSMIC.vcf"
    params:
        funcotator = "funcotator_dataSources.v1.7.20200521s"
    output:
        vcf = "FUNCOTATOR/{sample}_somatic.filtered.COSMIC.funcotator.vcf.gz"
    resources: time_min=50000, mem_mb=128000, cpus=16
    shell:
        """
        export TILEDB_DISABLE_FILE_LOCKING=1
        gatk Funcotator --variant {input.vcf} --reference {input.genome} --ref-version hg38 --data-sources-path {params.funcotator} --remove-filtered-variants --verbosity DEBUG --output {output.vcf} --output-file-format VCF
        """



#################################
# funcotator MAF
################################


rule FuncotatorMAF:
    input:
        genome = "GRCh38_Verily/bwa-0.7.12/GRCh38_Verily_v1.genome.fa",
        vcf = "COSMIC/{sample}_somatic.filtered.COSMIC.vcf"
    params:
        funcotator = "funcotator_dataSources.v1.7.20200521s"
    output:
        vcf = "FUNCOTATOR/{sample}_somatic.filtered.COSMIC.funcotator.maf.gz"
    resources: time_min=50000, mem_mb=128000, cpus=16
    shell:
        """
        export TILEDB_DISABLE_FILE_LOCKING=1
        gatk Funcotator --variant {input.vcf} --reference {input.genome} --ref-version hg38 --data-sources-path {params.funcotator} --remove-filtered-variants --verbosity DEBUG --output {output.vcf} --output-file-format MAF
        """






###################################################
# annotate with ensemble variant effector predictor
###################################################


rule VEP:
    input:
        genome = "GRCh38_Verily/bwa-0.7.12/GRCh38_Verily_v1.genome.fa",
        vcf = "FUNCOTATOR/{sample}_somatic.filtered.COSMIC.funcotator.vcf"
    output:
        vep = "VEP/{sample}_somatic.filtered.COSMIC.funcotator.vep.vcf"
    resources: time_min=50000, mem_mb=12800, cpus=1
    shell:
        """
        bash -c '
        . $HOME/.bashrc
        conda activate pypette-dna-wes
        mkdir -p VEP
        vep --offline --cache -i {input.vcf} -o {output.vep} --dir_cache /beegfs/datasets/genomes/hg38/annotation/VEP-cache --hgvs --vcf --force_overwrite --fasta {input.genome}
        conda deactivate'
        """

################################
# create the maf
################################



rule MAF:
    input:
        genome = "GRCh38_Verily/bwa-0.7.12/GRCh38_Verily_v1.genome.fa",
        vep = "VEP/{sample}_somatic.filtered.COSMIC.funcotator.vep.vcf"
    output:
        maf = "MAF/{sample}_somatic.filtered.COSMIC.funcotator.maf"
    resources: time_min=50000, mem_mb=12800, cpus=1
    shell:
        """
        bash -c '
        . $HOME/.bashrc
        conda activate pypette-dna-wes
        mkdir -p MAF
        vcf2maf.pl --input-vcf {input.vep} --output-maf {output.maf} --ref-fasta {input.genome} --tumor-id "{wildcards.sample}_OCT" --normal-id "{wildcards.sample}_PBMC" --ncbi-build GRCh38 --inhibit-vep --filter-vcf 0
        conda deactivate'
        """



rule MQC:
    params:
        qualimap = "qualimap/",
        QC = "qc/",
        PICARD = "markdup/",
        HsMETRICS = "hsmetrics",
    output: "MQC.done"
    resources: time_min = 5000, mem_mb=12800, cpus = 16
    shell:"""
       multiqc {params.qualimap} {params.qc} {params.markdup}
       touch {output}
       """



