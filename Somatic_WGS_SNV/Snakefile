import sys
import logging
from snakemake.io import glob_wildcards, expand
import glob,os
import pathlib
import csv
import pandas as pd
import numpy as np

#import multiqc

DATADIR_SHORT="/../"


#DATADIR_SHORT



SAMPLE_LIST_DIR = os.listdir(DATADIR_SHORT)

SUFF = set(["1","2","3","4","5","6","7"])

SUFFIX = ' '.join(map(str, SUFF))

print("SUFFIX",SUFFIX)


path = "logs_slurm"
try:

    os.mkdir(path)
except OSError:
    print ("Creation of the directory %s failed" % path)
else:
    print ("Successfully created the directory %s " % path)


rule all:
    input:
      expand(["{pref}_somatic_T_filtered.vcf.gz"], pref=SUFFIX.split(' ')),
            expand(["MAF/{pref}_somatic.filtered.COSMIC.funcotator.maf"], pref=SUFFIX.split(' ')),


g###########################################################################################################################
# I alredy aligned the reads over the ref genome --merged the bam if necessary -- and marked the duplicate reads with Picard
###########################################################################################################################         


rule interval_list:
    input:
      bed = "/beegfs/scratch/ric.cosr/ric.cosr/210724_A00626_0314_BH3CYVDMXY/Twist_Exome_Target_hg38.bed
    output:
      "/beegfs/scratch/ric.cosr/ric.cosr/210724_A00626_0314_BH3CYVDMXY/Twist_Exome_Target_hg38.interval_list
    resources: time_min = 50000, mem_mb=50000, cpus = 32
    shell:"""
      picard BedToIntervalList \
      I={input.bed} \
      O={output} \
      SD="/beegfs/datasets/genomes/hg38/GATK_bundle_new/v0/Homo_sapiens_assembly38.dict"
      """



###################################
# Some statistics
###################################

rule HsMetrics:
    input:
      BAM = "sorted/{pref}_C_markdup_only_marked.bam"
    output:
      HsMetrics = "hsmetrics/{pref}_hs_metrics.txt"
    params:
      reference = "/beegfs/datasets/genomes/hg38/GATK_bundle_new/v0/Homo_sapiens_assembly38.fasta",
      baits = "/beegfs/scratch/ric.cosr/ric.cosr/210724_A00626_0314_BH3CYVDMXY/Twist_Exome_Target_hg38.interval_list"
    resources: time_min = 50000, mem_mb=50000, cpus = 32
    shell:"""
    mkdir -p hsmetrics
    picard CollectHsMetrics \
      I={input.BAM} \
      O={output.HsMetrics} \
      R={params.reference} \
      BAIT_INTERVALS={params.baits} \
      TARGET_INTERVALS={params.baits}
      """






###################################
# Recalibration of T and C samples
###################################

rule recalibC:
    input:
        bam = DATADIR_SHORT+"/sorted/{pref}_C_markdup_only_marked.bam",
        ref_fasta = "GRCh38_Verily/bwa-0.7.12/GRCh38_Verily_v1.genome.fa",
        known_sites = "Homo_sapiens_assembly38.known_indels.vcf.gz"
    output:
        recal = "recalib/{pref}_C_recal_cpu.txt"
    resources: time_min=5000, mem_mb=48000, cpus=18
    shell:
        """
        gatk BaseRecalibrator --java-options -Xmx30g --input {input.bam} --output \
        {output.recal} --known-sites {input.known_sites} \
        --reference {input.ref_fasta}
        """


rule recalibT:
    input:
        bam = DATADIR_SHORT+"/sorted_T/{pref}_T_markdup_only_marked.bam",
        ref_fasta = "GRCh38_Verily/bwa-0.7.12/GRCh38_Verily_v1.genome.fa",
        known_sites = "Homo_sapiens_assembly38.known_indels.vcf.gz"
    output:
        recal = "recalib_T/{pref}_T_recal_cpu.txt"
    resources: time_min=5000, mem_mb=48000, cpus=18
    shell:
        """
        gatk BaseRecalibrator --java-options -Xmx30g --input {input.bam} --output \
        {output.recal} --known-sites {input.known_sites} \
        --reference {input.ref_fasta}
        """


rule applyBQSRC:
    input:
        bam = DATADIR_SHORT+"/sorted/{pref}_C_markdup_only_marked.bam",
        ref_fasta = "GRCh38_Verily/bwa-0.7.12/GRCh38_Verily_v1.genome.fa",
        recal = "recalib/{pref}_C_recal_cpu.txt"
    output:
        bam = "BQSR/{pref}_C_recal.bam"
    resources: time_min=5000, mem_mb=48000, cpus=18
    shell:
        """
        gatk ApplyBQSR --java-options -Xmx30g -R {input.ref_fasta} \
        -I {input.bam} --bqsr-recal-file {input.recal} -O {output.bam}
        """

rule applyBQSRT:
    input:
        bam = DATADIR_SHORT+"/sorted_T/{pref}_T_markdup_only_marked.bam",
        ref_fasta = "GRCh38_Verily_AM/GRCh38_Verily/bwa-0.7.12/GRCh38_Verily_v1.genome.fa",
        recal = "recalib_T/{pref}_T_recal_cpu.txt"
    output:
        bam = "BQSR_T/{pref}_T_recal.bam"
    resources: time_min=5000, mem_mb=48000, cpus=18
    shell:
        """
        gatk ApplyBQSR --java-options -Xmx30g -R {input.ref_fasta} \
        -I {input.bam} --bqsr-recal-file {input.recal} -O {output.bam}
        """


###############################
# panel of normal creation
###############################



rule GatkMutect2:
    input:
        bam = "BQSR/{pref}_C_recal.bam",
        ref_fasta = "GRCh38_Verily/bwa-0.7.12/GRCh38_Verily_v1.genome.fa",
    output:
        vcf = "BQSR/{pref}_C_recal.vcf"
    resources: time_min=5000, mem_mb=48000, cpus=18
    shell:
        """
        gatk Mutect2 -R {input.ref_fasta} -I {input.bam} -max-mnp-distance 0 -O {output.vcf} 
        """





#rule genomics_db_import:
#    input:
#        A = ["BQSR/1.vcf"],
#        B = ["BQSR/2.vcf"],
#        C = ["BQSR/3.vcf"],
#        D = ["BQSR/4.vcf"],
#        E = ["BQSR/5.vcf"],
#        F = ["BQSR/6.vcf"],
#        G = ["BQSR/7.vcf"],
#        ref_fasta = "GRCh38_Verily/bwa-0.7.12/GRCh38_Verily_v1.genome.fa"
#    params:
#        baits = "Twist_Exome_Target_hg38.bed"
#    output:
#        db = directory("pon_dbs")
#    resources: time_min=50000, mem_mb=128000, cpus=32
#    shell:
#        """
#        gatk GenomicsDBImport -R {input.ref_fasta} -V {input.A} -V {input.B} -V {input.C} -V {input.D} -V {input.E} -V {input.F} -V {input.G} -L {params.baits} --genomicsdb-workspace-path {output.db}
#        touch {output.db} --merge-input-intervals
#        """



rule genomics_db_import:
    input:
        samplenamemap = "cohort.sample_map",
        ref_fasta = "GRCh38_Verily/bwa-0.7.12/GRCh38_Verily_v1.genome.fa"
    params:
        baits = "Twist_Exome_Target_hg38.bed",
        tmpdir = "/beegfs/scratch/tmp" 
    output:
        db = directory("pon_dbs")
    resources: time_min=50000, mem_mb=128000, cpus=7
    shell:
        """
        gatk GenomicsDBImport -R {input.ref_fasta} --sample-name-map {input.samplenamemap} -L {params.baits} --genomicsdb-workspace-path {output.db} --merge-input-intervals --reader-threads 7 --tmp-dir {params.tmpdir}
        touch {output.db}
        """



rule PON:
    input:
        args = "pon_dbs",
        ref_fasta = "GRCh38_Verily/bwa-0.7.12/GRCh38_Verily_v1.genome.fa"
    params:
        args = "gendb://pon_dbs"
    output:
        vcf = "pon.vcf.gz"
    resources: time_min=50000, mem_mb=128000, cpus=32
    shell:
        """
        export TILEDB_DISABLE_FILE_LOCKING=1
        gatk CreateSomaticPanelOfNormals -R {input.ref_fasta} -O {output.vcf} -V {params.args}
        """

#add -L --intervals interval parameter for WES calling
#gatk GetSampleName -I sample.bam -O sample_name.txt #if in doubt about sample name

rule Tumor_matched_Normal: 
    input:
        tumor = "BQSR_T/{pref}_T_recal.bam",
        normal = "BQSR/{pref}_C_recal.bam",
        pon = "pon.vcf.gz",
        ref_fasta = "GRCh38_Verily/bwa-0.7.12/GRCh38_Verily_v1.genome.fa"
    params:
        normal = "{pref}_C",
        germres = "af-only-gnomad.hg38.vcf.gz",
        tmpdir = "/beegfs/scratch/tmp"
    output:  
        vcf = "{pref}_somatic_T.vcf.gz"
    resources: time_min=50000, mem_mb=128000, cpus=32
    shell:
        """
        export TILEDB_DISABLE_FILE_LOCKING=1
        gatk Mutect2 -R {input.ref_fasta} -I {input.tumor} -I {input.normal} -normal {params.normal} --germline-resource {params.germres} --panel-of-normals {input.pon} -O {output.vcf} --tmp-dir {params.tmpdir} --native-pair-hmm-threads 4
        """


#########################################
# filter mutect calls - tag PASS variants
#########################################


rule Filter:
    input:
        genome = "GRCh38_Verily/bwa-0.7.12/GRCh38_Verily_v1.genome.fa",
        tumor = "{pref}_somatic_T.vcf.gz"
    params:
        tmpdir = "/beegfs/scratch/tmp"
    output:
        vcf = "{pref}_somatic_filtered.vcf.gz"
    resources: time_min=50000, mem_mb=128000, cpus=32
    shell:
        """
        export TILEDB_DISABLE_FILE_LOCKING=1
        gatk FilterMutectCalls -R {input.genome} -V {input.tumor} -O {output.vcf} --tmp-dir {params.tmpdir}
        """

################################
# annotate with cosmic
################################


rule Annotat_Cosmic_filtered:
    input:
        vcf = "CALL/{pref}_somatic.filtered.vcf.gz"
    params:
        cosmic = "CosmicCodingMuts.normal.vcf.gz"
    output:
        vcf = "COSMIC/{pref}_somatic.filtered.COSMIC.vcf"
    resources: time_min=50000, mem_mb=128000, cpus=8
    shell:
        """
        mkdir -p COSMIC
        zcat {input.vcf}| SnpSift annotate  -info "COSMIC" {params.cosmic} > {output.vcf}
        """




################################
# annotate with funcotator
################################



rule FuncotatorVCF:
    input:
        genome = "GRCh38_Verily/bwa-0.7.12/GRCh38_Verily_v1.genome.fa",
        vcf = "COSMIC/{pref}_somatic.filtered.COSMIC.vcf"
    params:
        funcotator = "/beegfs/scratch/ric.cosr/ric.cosr/DellabonaP/funcotator_dataSources.v1.7.20200521s"
    output:
        vcf = "FUNCOTATOR/{pref}_somatic.filtered.COSMIC.funcotator.vcf.gz"
    resources: time_min=50000, mem_mb=128000, cpus=16
    shell:
        """
        mkdir -p FUNCOTATOR
        export TILEDB_DISABLE_FILE_LOCKING=1
        gatk Funcotator --variant {input.vcf} --reference {input.genome} --ref-version hg38 --data-sources-path {params.funcotator} --remove-filtered-variants --verbosity DEBUG --output {output.vcf} --output-file-format VCF
        """


###################################################
# annotate with ensemble variant effector predictor
###################################################


rule VEP:
    input:
        genome = "GRCh38_Verily/bwa-0.7.12/GRCh38_Verily_v1.genome.fa",
        vcf = "FUNCOTATOR/{pref}_somatic.filtered.COSMIC.funcotator.vcf"
    output:
        vep = "VEP/{pref}_somatic.filtered.COSMIC.funcotator.vep.vcf"
    resources: time_min=50000, mem_mb=12800, cpus=1
    shell:
        """
        bash -c '
        . $HOME/.bashrc
        conda activate pypette-dna-wes
        mkdir -p VEP
        vep --offline --cache -i {input.vcf} -o {output.vep} --dir_cache /beegfs/datasets/genomes/hg38/annotation/VEP-cache --hgvs --vcf --force_overwrite --fasta {input.genome}
        conda deactivate'
        """

################################
# create the maf
################################



rule MAF:
    input:
        genome = "GRCh38_Verily/bwa-0.7.12/GRCh38_Verily_v1.genome.fa",
        vep = "VEP/{pref}_somatic.filtered.COSMIC.funcotator.vep.vcf"
    output:
        maf = "MAF/{pref}_somatic.filtered.COSMIC.funcotator.maf"
    resources: time_min=50000, mem_mb=12800, cpus=1
    shell:
        """
        bash -c '
        . $HOME/.bashrc
        conda activate pypette-dna-wes
        mkdir -p MAF
        vcf2maf.pl --input-vcf {input.vep} --output-maf {output.maf} --ref-fasta {input.genome} --tumor-id "{wildcards.sample}_OCT" --normal-id "{wildcards.sample}_PBMC" --ncbi-build GRCh38 --inhibit-vep --filter-vcf 0
        conda deactivate'
        """


