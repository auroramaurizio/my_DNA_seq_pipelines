import sys
import logging
from snakemake.io import glob_wildcards, expand
import glob,os
import pathlib
import csv
import pandas as pd
import numpy as np


path = "logs_slurm"
try:
    os.mkdir(path)
except OSError:
    print ("Creation of the directory %s failed" % path)
else:
    print ("Successfully created the directory %s " % path)



DATADIR_SHORT = "/beegfs/scratch/ric.cosr/ric.cosr/DellabonaP/runs/"
runs_set = set(["190103_NB501182_0325_AHHJ2FBGX9","190121_NB501182_0333_AHMG3JBGX7"])
runs = ' '.join(map(str, runs_set))


project = set(["DellabonaP_480_NeoAg_esophagusK"])
proj = ' '.join(map(str, project))


DATADIR_325_480="/beegfs/scratch/ric.cosr/ric.cosr/DellabonaP/runs/190103_NB501182_0325_AHHJ2FBGX9/DellabonaP_480_NeoAg_esophagusK"
DATADIR_333_480="/beegfs/scratch/ric.cosr/ric.cosr/DellabonaP/runs/190121_NB501182_0333_AHMG3JBGX7/DellabonaP_480_NeoAg_esophagusK"


SAMPLE_LIST_DIR_325_480 = os.listdir(DATADIR_325_480)
SAMPLE_LIST_DIR_333_480 = os.listdir(DATADIR_333_480)


SUFF_325_480 = []
SAMPLELIST_325_480 = []


for file in SAMPLE_LIST_DIR_325_480:
    A = file.split("_")[0]
    B = file.split("_")[1]
    C = A + '_' + B
    SUFF_325_480.append(C)
    SAMPLELIST_325_480.append(A)


SAMPLELIST_325_480=set(SAMPLELIST_325_480)
SUFF_325_480=set(SUFF_325_480)

print(SUFF_325_480)
print(SAMPLELIST_325_480)




SUFF_333_480 = []
SAMPLELIST_333_480 = []

for file in SAMPLE_LIST_DIR_333_480:
    #SAMPLELIST.append(file.split("_")[0])
    A = file.split("_")[0]
    B = file.split("_")[1]
    C = A + '_' + B
    SUFF_333_480.append(C)
    SAMPLELIST_333_480.append(A)



SUFF_333_480=set(SUFF_333_480)
SAMPLELIST_333_480=set(SAMPLELIST_333_480)

print("SAMPLELIST_333_480",SAMPLELIST_333_480)
print("SAMPLELIST_325_480",SAMPLELIST_325_480)


print("SUFF_333_480",SUFF_333_480)
print("SUFF_325_480",SUFF_325_480)


SUFF_480 = set.union(SUFF_333_480, SUFF_325_480)
SAMPLE_480 = set.union(SAMPLELIST_333_480, SAMPLELIST_325_480)


SUFFIX_480 = ' '.join(map(str, SUFF_480))
print("SUFFIX_480", SUFFIX_480)

SAMPLELIST_480 = ' '.join(map(str, SAMPLE_480))
print("SAMPLELIST_480", SAMPLELIST_480)



def get_rgidfromrun(run):
    return str(run.split("_")[3])

rule all:
    input:
      expand(["clipOverlap/{sample}_PBMC_markdup.bam.bai"], sample=SAMPLELIST_480.split(' ')),
      expand(["clipOverlap/{sample}_OCT_markdup.bam.bai"], sample=SAMPLELIST_480.split(' ')),
      expand(["MERGED_T_N/{pref}_R1.fastq.gz"],pref=SUFFIX_480.split(' '), prj=proj, run=runs.split(' '),allow_missing=True),
      expand(["MERGED_T_N/{pref}_R2.fastq.gz"],pref=SUFFIX_480.split(' '), prj=proj, run=runs.split(' '),allow_missing=True),
      #expand(["fastqc/{pref}"], pref=SUFFIX_480.split(' '), prj=proj, run=runs.split(' ')),
      #expand(["qc/{run}/{prj}/{pref}"], pref=SUFFIX_480.split(' '), prj=proj, run=runs.split(' ')),
      expand(["trimmed_N/{run}/{prj}/{pref}_R1.fastq.gz"], pref=SUFFIX_480.split(' '), prj=proj, run=runs.split(' ')),
      #expand(["mapped/{run}/{prj}/{pref}.bam"], pref=SUFFIX_480.split(' '), prj=proj, run=runs.split(' ')),
      #expand(["sorted/{run}/{prj}/{pref}.bam"], pref=SUFFIX_480.split(' '), prj=proj, run=runs.split(' ')),
      #expand(["merged_bam/{pref}.bam"], pref=SUFFIX_480.split(' '), prj=proj, run=runs.split(' ')),
      #expand(["markdup/{pref}_markdup.bam","markdup/{pref}_markdup_metrics.log"], pref=SUFFIX_480.split(' ')),
      #expand(["sorted/{pref}_markdup.bam"], pref=SUFFIX_480.split(' ')),
      #expand(["sorted/{pref}_markdup.bam.bai"], pref=SUFFIX_480.split(' ')),
      #expand(["qualimap_clipOverlap/{pref}"], pref=SUFFIX_480.split(' ')),
      #expand(["recalib_C_clipOverlap/{sample}_C_recal_cpu.txt"], sample=SAMPLELIST_480.split(' ')),
      #expand(["recalib_T_clipOverlap/{sample}_T_recal_cpu.txt"], sample=SAMPLELIST_480.split(' ')),
      expand(["BQSR_C_clipOverlap/{sample}_PBMC_recal.bam"], sample=SAMPLELIST_480.split(' ')),
      expand(["BQSR_T_clipOverlap/{sample}_OCT_recal.bam"], sample=SAMPLELIST_480.split(' ')),
      expand(["BQSR_C_clipOverlap/{sample}_PBMC_recal.vcf"], sample=SAMPLELIST_480.split(' ')),
      expand(["CALL_clipOverlap/{sample}_somatic.vcf.gz"], sample=SAMPLELIST_480.split(' ')),
      expand(["VEP_clipOverlap/{sample}_somatic.filtered.COSMIC.funcotator.vep.vcf"], sample=SAMPLELIST_480.split(' ')),
      #expand(["COSMIC_clipOverlap/{sample}_somatic.COSMIC.vcf"], sample=SAMPLELIST_480.split(' ')),
      #expand(["COSMIC_clipOverlap/{sample}_somatic.filtered.COSMIC.vcf"], sample=SAMPLELIST_480.split(' ')),
      #expand(["FUNCOTATOR_clipOverlap/{sample}_somatic.filtered.COSMIC.funcotator.vcf.gz"], sample=SAMPLELIST_480.split(' ')),
      expand(["MAF_clipOverlap/{sample}_somatic.filtered.COSMIC.funcotator.maf"], sample=SAMPLELIST_480.split(' ')),
      #expand(["FUNCOTATOR_clipOverlap/{sample}_somatic.filtered.COSMIC.funcotator.vcf"], sample=SAMPLELIST_480.split(' ')),
      #expand(["hsmetrics_clipOverlap/{pref}_hs_metrics.txt"], pref=SUFFIX_480.split(' ')),
      #expand(["MERGED/{run}/{prj}/{pref}_R1.fastq.gz","MERGED/{run}/{prj}/{pref}_R2.fastq.gz"], pref=SUFFIX_480.split(' '), prj=proj, run=runs.split(' '))
      #expand(["MERGED/{pref}_R1.fastq.gz"], pref=SUFFIX_480.split(' '), prj=proj, run=runs.split(' ')),
      #expand(["MERGED/{pref}_R2.fastq.gz"], pref=SUFFIX_480.split(' '), prj=proj, run=runs.split(' '))
      #expand(["bcftools_stats/{sample}.stats"], sample=SAMPLELIST_480.split(' ')),
      #expand(["hsmetrics_clipOverlap/{pref}_hs_metrics.txt"], pref=SUFFIX_480.split(' ')),
      #expand(["qualimap_clipOverlap/{pref}"], pref=SUFFIX_480.split(' '))



rule mergeFastq_R1_N:
    input:
        expand("trimmed_N/{run}/{prj}/{{pref}}_R1.fastq.gz",run=runs.split(' '), prj=proj, pref=SUFFIX_480.split(' '),allow_missing=True)
    output:
        "MERGED_T_N/{pref}_R1.fastq.gz"
    resources: time_min = 5000, mem_mb=25000, cpus = 32
    threads: 32
    shell:"""
        cat {input} > {output}
        """



rule mergeFastq_R2_N:
    input:
        expand("trimmed_N/{run}/{prj}/{{pref}}_R2.fastq.gz",run=runs.split(' '), prj=proj, pref=SUFFIX_480.split(' '),allow_missing=True)
    output:
        "MERGED_T_N/{pref}_R2.fastq.gz"
    resources: time_min = 5000, mem_mb=25000, cpus = 32
    threads: 32
    shell:"""
        cat {input} > {output}
        """




rule mergeFastq_480:
    output:
        R1 = "MERGED_FQ/{run}/{prj}/{pref}_R1.fastq.gz",
        R2 = "MERGED_FQ/{run}/{prj}/{pref}_R2.fastq.gz"
    resources: time_min = 500, mem_mb=2500, cpus = 2
    shell: """
        mkdir -p MERGED_FQ
            cat {DATADIR_SHORT}/{wildcards.run}/{wildcards.prj}/{wildcards.pref}_S*_R1_001.fastq.gz > {output.R1}
            cat {DATADIR_SHORT}/{wildcards.run}/{wildcards.prj}/{wildcards.pref}_S*_R2_001.fastq.gz > {output.R2}
        """


rule fastqc_480:
    input:
        R1 = "trimmed/{run}/{prj}/{pref}_R1.fastq.gz",
        R2 = "trimmed/{run}/{prj}/{pref}_R2.fastq.gz"
    output:
        directory("qc/{run}/{prj}/{pref}")
    params: ""
    log:
        "logs/fastqc/{run}_{prj}_{pref}.log"
    threads: 12
    resources: time_min = 50000, mem_mb=25000, cpus = 32
    shell:"""
            mkdir -p "qc/{wildcards.run}/{wildcards.prj}/{wildcards.pref}"
            fastqc -o {output} {input.R1} {input.R2}
        """



rule trimming:
    input:
        R1="MERGED_FQ/{run}/{prj}/{pref}_R1.fastq.gz",
        R2="MERGED_FQ/{run}/{prj}/{pref}_R2.fastq.gz",
        adapters = "adapters-pe.fa"
    output:
        R1="trimmed/{run}/{prj}/{pref}_R1.fastq.gz",
        R2="trimmed/{run}/{prj}/{pref}_R2.fastq.gz"
    log:
        main="trimmed/{run}/{prj}/{pref}_trim.log",
        out="trimmed/{run}/{prj}/{pref}_trimout.log"
    threads: 12
    resources: time_min=50000, mem_mb=64000, cpus=32
    shell:"""
        mkdir -p trimmed
        bbduk.sh -Xmx24g in={input.R1} in2={input.R2} out={output.R1} out2={output.R2} ref={input.adapters} k=23 mink=11 rcomp=t ktrim=f kmask=X qtrim=rl trimq=5 forcetrimleft=5 forcetrimright2=0  overwrite=true stats={log.main}  2> "{log.out}"

       """



rule trimming_N:
    input:
        R1="MERGED_FQ/{run}/{prj}/{pref}_R1.fastq.gz",
        R2="MERGED_FQ/{run}/{prj}/{pref}_R2.fastq.gz",
        adapters = "adapters-pe.fa"
    output:
        R1="trimmed_N/{run}/{prj}/{pref}_R1.fastq.gz",
        R2="trimmed_N/{run}/{prj}/{pref}_R2.fastq.gz"
    log:
        main="trimmed/{run}/{prj}/{pref}_trim.log",
        out="trimmed/{run}/{prj}/{pref}_trimout.log"
    threads: 12
    resources: time_min=50000, mem_mb=64000, cpus=32
    shell:"""
        mkdir -p trimmed
        bbduk.sh -Xmx24g in={input.R1} in2={input.R2} out={output.R1} out2={output.R2} ref={input.adapters} k=23 mink=11 rcomp=t ktrim=f kmask=N qtrim=rl trimq=5 forcetrimleft=5 forcetrimright2=0  overwrite=true stats={log.main}  2> "{log.out}"

       """




#rule fastqc_merged:
#    input:
#        R1 = "MERGED/{pref}_R1.fastq.gz",
#        R2 = "MERGED/{pref}_R2.fastq.gz"
#    output:
#        directory("fastqc/{pref}")
#    params: ""
#    log:
#        "logs/fastqc/{pref}.log"
#    threads: 12
#    resources: time_min = 50000, mem_mb=25000, cpus = 32
#    shell:"""
#            mkdir -p "fastqc/{wildcards.pref}"
#            fastqc -o {output} {input.R1} {input.R2}
#        """


rule map_480:
    input:
        R1 = "trimmed/{run}/{prj}/{pref}_R1.fastq.gz",
        R2 = "trimmed/{run}/{prj}/{pref}_R2.fastq.gz",
        reference = "/beegfs/datasets/genomes/hg38/GATK_bundle_new/v0/Homo_sapiens_assembly38.fasta"
    params:
        id = lambda wildcards: get_rgidfromrun(f"{wildcards.run}"),
        pu=lambda wildcards: f"{wildcards.run}.{wildcards.pref}",
        sm=lambda wildcards: f"{wildcards.pref}",
        pl="NextSeq500"
        #lb = lambda wildcards:get_rgidfromrun(f"{wildcards.run}").f"{wildcards.pref}"
    output:
        "mapped/{run}/{prj}/{pref}.bam"
    threads: 72
    resources: time_min=50000, mem_mb=25000, cpus=72
    shell:"""

       bwa mem -t 72 -M -R '@RG\\tID:{params.id}.{params.sm}\\tPL:{params.pl}\\tPU:{params.pu}\\tSM:{params.sm}\\tLB:{params.id}.{params.sm}\\tCN:COSR\\tSO:unsorted' {input.reference} {input.R1} {input.R2} | samtools view -Sb > {output}

       """


rule samtools_sort_map:
    input:
        "mapped/{run}/{prj}/{pref}.bam"
    output:
        "sorted/{run}/{prj}/{pref}.bam"
    resources: time_min = 5000, mem_mb=25000, cpus = 32
    shell:"""
        mkdir -p sorted
        samtools sort {input} -o {output}
        """


rule samtools_merge:
    input:
        expand("sorted/{run}/{prj}/{{pref}}.bam",run=runs.split(' '), prj=proj, pref=SUFFIX_480.split(' '))
    output:
        "merged_bam/{pref}.bam"
    resources: time_min = 5000, mem_mb=25000, cpus = 32
    threads: 32
    shell:"""
        mkdir -p merged_bam
        samtools merge -@ {threads} {output} {input}
        """

rule rmdup_only_marked:
    input:
        "merged_bam/{pref}.bam"
    output:
        reads = "markdup/{pref}_markdup.bam",
        metrics = "markdup/{pref}_markdup_metrics.log"
    resources: time_min=5000, mem_mb=2500, cpus=36
    shell:"""
       mkdir -p markdup
       picard MarkDuplicates REMOVE_DUPLICATES=false\
       I={input} \
       O={output.reads} \
       M={output.metrics}
       """


rule samtools_sort_marked:
    input:
        "markdup/{pref}_markdup.bam"
    output:
        "sorted/{pref}_markdup.bam"
    resources: time_min = 5000, mem_mb=25000, cpus = 32
    shell:"""
        mkdir -p sorted
        samtools sort {input} -o {output}
        """


rule samtools_index_only_marked:
    input:
        BAM = "sorted/{pref}_markdup.bam"
    output:
        "sorted/{pref}_markdup.bam.bai"
    resources: time_min = 500, mem_mb=2500, cpus = 16
    shell:"""
        samtools index {input.BAM}
        touch {output}
        """
         



rule clipOverlap:
    input:
        BAM = "sorted/{pref}_markdup.bam"
    output:
        "clipOverlap/{pref}_markdup.bam"
    resources: time_min = 500, mem_mb=2500, cpus = 16
    shell:"""
        mkdir -p clipOverlap
        bam clipOverlap --in {input.BAM} --out {output} --stats --unmapped --storeOrig
        touch {output}
        """



rule clipOverlap_index:
    input:
        BAM = "clipOverlap/{pref}_markdup.bam"
    output:
        "clipOverlap/{pref}_markdup.bam.bai"
    resources: time_min = 500, mem_mb=2500, cpus = 16
    shell:"""
        samtools index {input.BAM}
        touch {output}
        """



rule qualimap:
    input:
        "clipOverlap/{pref}_markdup.bam"
    params:
        bed="/beegfs/scratch/ric.cosr/ric.cosr/DellabonaP/agilent_v7_sureselect_MergedProbes.bed"
    output:
        directory("qualimap/{pref}")
    resources: time_min = 50000, mem_mb=50000, cpus = 32
    shell:"""
        mkdir -p "qualimap/{wildcards.pref}"
        qualimap --java-mem-size=50000M  bamqc -c -bam {input} -outdir {output} --feature-file {params.bed}
        """

###################################
# Recalibration of T and C samples
###################################


rule recalibC:
    input:
        bam = "clipOverlap/{sample}_PBMC_markdup.bam",
        ref_fasta = "/beegfs/datasets/genomes/hg38/GATK_bundle_new/v0/Homo_sapiens_assembly38.fasta",
        known_sites = "/beegfs/datasets/genomes/hg38/GATK_bundle_new/v0/Homo_sapiens_assembly38.known_indels.vcf.gz"
    output:
        recal = "recalib_C_clipOverlap/{sample}_C_recal_cpu.txt"
    resources: time_min=5000, mem_mb=48000, cpus=18
    shell:
        """
        gatk BaseRecalibrator --java-options -Xmx30g --input {input.bam} --output \
        {output.recal} --known-sites {input.known_sites} \
        --reference {input.ref_fasta}
        """


rule recalibT:
    input:
        bam = "clipOverlap/{sample}_OCT_markdup.bam",
        ref_fasta = "/beegfs/datasets/genomes/hg38/GATK_bundle_new/v0/Homo_sapiens_assembly38.fasta",
        known_sites = "/beegfs/datasets/genomes/hg38/GATK_bundle_new/v0/Homo_sapiens_assembly38.known_indels.vcf.gz"
    output:
        recal = "recalib_T_clipOverlap/{sample}_T_recal_cpu.txt"
    resources: time_min=5000, mem_mb=48000, cpus=18
    shell:
        """
        gatk BaseRecalibrator --java-options -Xmx30g --input {input.bam} --output \
        {output.recal} --known-sites {input.known_sites} \
        --reference {input.ref_fasta}
        """


rule applyBQSRT:
    input:
        bam = "clipOverlap/{sample}_OCT_markdup.bam",
        ref_fasta = "/beegfs/datasets/genomes/hg38/GATK_bundle_new/v0/Homo_sapiens_assembly38.fasta",
        recal = "recalib_T_clipOverlap/{sample}_T_recal_cpu.txt"
    output:
        bam = "BQSR_T_clipOverlap/{sample}_OCT_recal.bam"
    resources: time_min=5000, mem_mb=48000, cpus=18
    shell:
        """
        gatk ApplyBQSR --java-options -Xmx30g -R {input.ref_fasta} \
        -I {input.bam} --bqsr-recal-file {input.recal} -O {output.bam}
        """

rule applyBQSRC:
    input:
        bam = "clipOverlap/{sample}_PBMC_markdup.bam",
        ref_fasta = "/beegfs/datasets/genomes/hg38/GATK_bundle_new/v0/Homo_sapiens_assembly38.fasta",
        recal = "recalib_C_clipOverlap/{sample}_C_recal_cpu.txt"
    output:
        bam = "BQSR_C_clipOverlap/{sample}_PBMC_recal.bam"
    resources: time_min=5000, mem_mb=48000, cpus=18
    shell:
        """
        gatk ApplyBQSR --java-options -Xmx30g -R {input.ref_fasta} \
        -I {input.bam} --bqsr-recal-file {input.recal} -O {output.bam}
        """



###############################
# panel of normal creation
###############################



rule GatkMutect2:
    input:
        bam = "BQSR_C_clipOverlap/{sample}_PBMC_recal.bam",
        ref_fasta = "/beegfs/datasets/genomes/hg38/GATK_bundle_new/v0/Homo_sapiens_assembly38.fasta",
    output:
        vcf = "BQSR_C_clipOverlap/{sample}_PBMC_recal.vcf"
    resources: time_min=5000, mem_mb=48000, cpus=18
    shell:
        """
        gatk Mutect2 -R {input.ref_fasta} -I {input.bam} -max-mnp-distance 0 -O {output.vcf}
        """


rule genomics_db_import:
    input:
        samplenamemap = "cohort.sample_map",
        ref_fasta = "/beegfs/datasets/genomes/hg38/GATK_bundle_new/v0/Homo_sapiens_assembly38.fasta"
    params:
        baits = "/beegfs/datasets/buffer/ric.cosr/GRCh38_GDC/annotation/agilent_v7_sureselect_MergedProbes.interval_list",
        tmpdir = "/beegfs/scratch/tmp"
    output:
        db = directory("pon_dbs")
    resources: time_min=50000, mem_mb=128000, cpus=7
    shell:
        """
        gatk GenomicsDBImport -R {input.ref_fasta} --sample-name-map {input.samplenamemap} -L {params.baits} --genomicsdb-workspace-path {output.db} --merge-input-intervals --reader-threads 7 --tmp-dir {params.tmpdir}
        touch {output.db}
        """


rule PON:
    input:
        args = "pon_dbs",
        ref_fasta = "/beegfs/datasets/genomes/hg38/GATK_bundle_new/v0/Homo_sapiens_assembly38.fasta"
    params:
        args = "gendb://pon_dbs"
    output:
        vcf = "pon.vcf.gz"
    resources: time_min=50000, mem_mb=128000, cpus=32
    shell:
        """
        export TILEDB_DISABLE_FILE_LOCKING=1
        gatk CreateSomaticPanelOfNormals -R {input.ref_fasta} -O {output.vcf} -V {params.args}
        """

##########################################
# gatk mutect call: exclude soft clipped bases!
##########################################

rule Tumor_matched_Normal: 
    input:
        ref_fasta = "/beegfs/datasets/genomes/hg38/GATK_bundle_new/v0/Homo_sapiens_assembly38.fasta",
        tumor = "BQSR_T_clipOverlap/{sample}_OCT_recal.bam",
        normal = "BQSR_C_clipOverlap/{sample}_PBMC_recal.bam",
        pon = "pon.vcf.gz"
    params:
        baits = "/beegfs/datasets/buffer/ric.cosr/GRCh38_GDC/annotation/agilent_v7_sureselect_MergedProbes.interval_list",
        ref_fasta = "GRCh38_Verily/bwa-0.7.12/GRCh38_Verily_v1.genome.fa",
        normal = "{sample}_PBMC",
        germres = "/beegfs/datasets/genomes/hg38/GATK_pypette/af-only-gnomad.hg38.vcf.gz",
        tmpdir = "/beegfs/scratch/tmp"
    output:  
        vcf = "CALL_clipOverlap/{sample}_somatic.vcf.gz"
    resources: time_min=50000, mem_mb=128000, cpus=32
    shell:
        """
        mkdir -p CALL_clipOverlap
        export TILEDB_DISABLE_FILE_LOCKING=1
        gatk Mutect2 -R {input.ref_fasta} -I {input.tumor} -I {input.normal} -normal {params.normal} --germline-resource {params.germres} --panel-of-normals {input.pon} -O {output.vcf} --tmp-dir {params.tmpdir} --native-pair-hmm-threads 4 --dont-use-soft-clipped-bases true --dont-use-soft-clipped-bases true
        """


rule Annotat_Cosmic:
    input:
        vcf = "CALL_clipOverlap/{sample}_somatic.vcf.gz"
    params:
        cosmic = "/beegfs/scratch/ric.cosr/ric.cosr/DellabonaP/CosmicCodingMuts.normal.vcf.gz"
    output:
        vcf = "COSMIC_clipOverlap/{sample}_somatic.COSMIC.vcf"
    resources: time_min=50000, mem_mb=128000, cpus=8
    shell:
        """
        mkdir -p COSMIC_clipOverlap
        zcat {input.vcf}| SnpSift annotate  -info "COSMIC" {params.cosmic} > {output.vcf}
        """



rule Annotat_Cosmic_filtered:
    input:
        vcf = "CALL_clipOverlap/{sample}_somatic.filtered.vcf.gz"
    params:
        cosmic = "/beegfs/scratch/ric.cosr/ric.cosr/DellabonaP/CosmicCodingMuts.normal.vcf.gz"
    output:
        vcf = "COSMIC_clipOverlap/{sample}_somatic.filtered.COSMIC.vcf"
    resources: time_min=50000, mem_mb=128000, cpus=8
    shell:
        """
        mkdir -p COSMIC
        zcat {input.vcf}| SnpSift annotate  -info "COSMIC" {params.cosmic} > {output.vcf}
        """




################################
# filter mutect calls
################################


rule Filter:
    input:
        genome = "/beegfs/datasets/genomes/hg38/GATK_bundle_new/v0/Homo_sapiens_assembly38.fasta",
        vcf = "CALL_clipOverlap/{sample}_somatic.vcf.gz"
    params:
        tmpdir = "/beegfs/scratch/tmp"
    output:
        vcf = "CALL_clipOverlap/{sample}_somatic.filtered.vcf.gz"
    resources: time_min=50000, mem_mb=128000, cpus=16
    shell:
        """
        export TILEDB_DISABLE_FILE_LOCKING=1
        gatk FilterMutectCalls -R {input.genome} -V {input.vcf} -O {output.vcf} --tmp-dir {params.tmpdir}
        """




##################################
# funcotator VCF
#################################


rule FuncotatorVCF:
    input:
        genome = "/beegfs/datasets/genomes/hg38/GATK_bundle_new/v0/Homo_sapiens_assembly38.fasta",
        vcf = "COSMIC_clipOverlap/{sample}_somatic.filtered.COSMIC.vcf"
    params:
        funcotator = "/beegfs/scratch/ric.cosr/ric.cosr/DellabonaP/funcotator_dataSources.v1.7.20200521s"
    output:
        vcf = "FUNCOTATOR_clipOverlap/{sample}_somatic.filtered.COSMIC.funcotator.vcf.gz"
    resources: time_min=50000, mem_mb=128000, cpus=16
    shell:
        """
        mkdir -p FUNCOTATOR_clipOverlap
        export TILEDB_DISABLE_FILE_LOCKING=1
        gatk Funcotator --variant {input.vcf} --reference {input.genome} --ref-version hg38 --data-sources-path {params.funcotator} --remove-filtered-variants --verbosity DEBUG --output {output.vcf} --output-file-format VCF 
        """



rule VEP:
    input:
        genome = "/beegfs/datasets/genomes/hg38/GATK_bundle_new/v0/Homo_sapiens_assembly38.fasta",
        vcf = "FUNCOTATOR_clipOverlap/{sample}_somatic.filtered.COSMIC.funcotator.vcf.gz"
    output:
        vep = "VEP_clipOverlap/{sample}_somatic.filtered.COSMIC.funcotator.vep.vcf"
    resources: time_min=50000, mem_mb=12800, cpus=1
    shell:
        """
        bash -c '
        . $HOME/.bashrc
        conda activate pypette-dna-wes
        mkdir -p VEP_clipOverlap
        vep --offline --cache -i {input.vcf} -o {output.vep} --dir_cache /beegfs/datasets/genomes/hg38/annotation/VEP-cache --hgvs --vcf --force_overwrite --fasta {input.genome}
        conda deactivate'
        """




#################################
# funcotator MAF
################################
rule FuncotatorMAF:
    input:
        genome = "/beegfs/datasets/genomes/hg38/GATK_bundle_new/v0/Homo_sapiens_assembly38.fasta",
        vep = "VEP_clipOverlap/{sample}_somatic.filtered.COSMIC.funcotator.vep.vcf"
    output:
        maf = "MAF_clipOverlap/{sample}_somatic.filtered.COSMIC.funcotator.maf"
    resources: time_min=50000, mem_mb=12800, cpus=1
    shell:
        """
        bash -c '
        . $HOME/.bashrc
        conda activate pypette-dna-wes 
        mkdir -p MAF_clipOverlap
        vcf2maf.pl --input-vcf {input.vep} --output-maf {output.maf} --ref-fasta {input.genome} --tumor-id "{wildcards.sample}_OCT" --normal-id "{wildcards.sample}_PBMC" --ncbi-build GRCh38 --inhibit-vep --filter-vcf 0
        conda deactivate'
        """




rule bcftools_stats:
    input:
        vep = "VEP_clipOverlap/{sample}_somatic.filtered.COSMIC.funcotator.vep.vcf"
    params:
        genome = "/beegfs/datasets/genomes/hg38/GATK_bundle_new/v0/Homo_sapiens_assembly38.fasta",
        bed="/beegfs/scratch/ric.cosr/ric.cosr/DellabonaP/agilent_v7_sureselect_MergedProbes.bed"
    output:
        stats = "bcftools_stats_clipOverlap/{sample}.stats"
    resources: time_min=50000, mem_mb=12800, cpus=1
    shell:
        """
        mkdir -p bcftools_stats_clipOverlap
        bcftools stats --depth 20,40,200 -F {params.genome} --threads 6 -T {params.bed} {input.vep} > {output.stats}
        """



rule HsMetrics:
    input:
      BAM = "clipOverlap/{pref}_markdup.bam"
    output:
      HsMetrics = "hsmetrics_clipOverlap/{pref}_hs_metrics.txt"
    params:
      reference = "/beegfs/datasets/genomes/hg38/GATK_bundle_new/v0/Homo_sapiens_assembly38.fasta",
      baits = "agilent_interval_list"
    resources: time_min = 50000, mem_mb=50000, cpus = 32
    shell:"""
    mkdir -p hsmetrics_clipOverlap
    picard CollectHsMetrics \
      I={input.BAM} \
      O={output.HsMetrics} \
      R={params.reference} \
      BAIT_INTERVALS={params.baits} \
      TARGET_INTERVALS={params.baits}
      """


rule MQC:
    params:
        qualimap = "qualimap_clipOverlap/",
        QC = "qc/",
        PICARD = "markdup/",
        HsMETRICS = "hsmetrics_clipOverlap",
    output: "MQC.done"
    resources: time_min = 5000, mem_mb=12800, cpus = 16
    shell:"""
       multiqc {params.qualimap} {params.HsMETRICS} {params.PICARD} {params.QC}
       touch {output}
       """




                 
