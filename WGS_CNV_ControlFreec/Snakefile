import sys
import logging
from snakemake.io import glob_wildcards, expand
import glob,os
import pathlib
import csv
import pandas as pd
import numpy as np


#run with snakemake --profile slurm --use-conda


#import multiqc

DATADIR_SHORT="FASTQ"
SAMPLE_LIST_DIR = os.listdir(DATADIR_SHORT)


SUFF = []
SAMPLELIST = []
for file in SAMPLE_LIST_DIR:
    #SAMPLELIST.append(file.split("_")[0])
    A = file.split("_")[0]
    B = file.split("_")[1]
    C = file.split("DNA")[0]
    D = C + 'DNA'
    E = A + '_' + B
    SUFF.append(D)
    SAMPLELIST.append(E)


SAMPLELIST=set(SAMPLELIST)
SUFF=set(SUFF)


SUFFIX = ' '.join(map(str, SUFF))
print("SUFFIX", SUFFIX)


PATIENT = ' '.join(map(str, SAMPLELIST))

print("PATIENT",PATIENT)

path = "logs_slurm"
try:
    os.mkdir(path)
except OSError:
    print ("Creation of the directory %s failed" % path)
else:
    print ("Successfully created the directory %s " % path)



rule all:
    input:
        #expand(["qc/{pref}"], pref=SUFFIX.split(' ')),
        #expand(["MERGED/{pref}_R1.fastq.gz","MERGED/{pref}_R2.fastq.gz"], pref=SUFFIX.split(' ')),
        #expand(["sorted/{pref}_markdup_only_marked.bam"], pref=SUFFIX.split(' ')),
        expand(["CF/{pat}/plot_CNV_flat_logratio_{pat}.pdf"], pat=PATIENT.split(' ')),
        expand(["CF/{pat}/plot_CNV_{pat}.pdf"], pat=PATIENT.split(' ')),
        expand(["CF/{pref}/plot_Lc_{pref}.pdf"], pref=SUFFIX.split(' ')),
        expand(["CF/{pref}/{pref}_calls.txt"], pref=SUFFIX.split(' '))



rule mergeFastq:
    output:
        R1 = "MERGED/{pref}_R1.fastq.gz",
        R2 = "MERGED/{pref}_R2.fastq.gz"
    params: DATADIR_SHORT
    resources: time_min = 500, mem_mb=2500, cpus = 2
    shell: """
        mkdir -p MERGED
        cat {params}/{wildcards.pref}/{wildcards.pref}_S*_R1_001.fastq.gz > {output.R1}
        cat {params}/{wildcards.pref}/{wildcards.pref}_S*_R2_001.fastq.gz > {output.R2}
        """

rule fastqc:
    input:
        R1 = "MERGED/{pref}_R1.fastq.gz",
        R2 = "MERGED/{pref}_R2.fastq.gz"
    output:
        directory("qc/{pref}")
    params: ""
    log:
        "logs/fastqc/{pref}.log"
    threads: 12
    resources: time_min = 50000, mem_mb=25000, cpus = 32
    shell:"""
        mkdir -p "qc/{wildcards.pref}"
        fastqc -o {output} {input.R1} {input.R2}
        """

rule trimming:
    input:
        R1="MERGED/{pref}_R1.fastq.gz",
        R2="MERGED/{pref}_R2.fastq.gz",
        adapters = "adapters-pe.fa"
    output:
        R1="trimmed/{pref}_R1.fastq.gz",
        R2="trimmed/{pref}_R2.fastq.gz"
    log:
        main="trimmed/{pref}_trim.log",
        out="trimmed/{pref}_trimout.log"
    threads: 12
    resources: time_min=50000, mem_mb=25000, cpus=32
    shell:"""
        mkdir -p trimmed
        bbduk.sh -Xmx24g in={input.R1} in2={input.R2} out={output.R1} out2={output.R2} ref={input.adapters} k=23 mink=11 rcomp=t ktrim=f kmask=X qtrim=rl trimq=5 forcetrimleft=15 forcetrimright2=0  overwrite=true stats={log.main}  2> "{log.out}"

       """




rule map:
    input:
        R1 = "trimmed/{pref}_R1.fastq.gz",
        R2 = "trimmed/{pref}_R2.fastq.gz",
        reference = "/beegfs/datasets/buffer/ric.cosr/GRCh38_Verily_AM/GRCh38_Verily/bwa-0.7.12/GRCh38_Verily_v1.genome.fa"
    params:
        id = lambda wildcards: get_rgidfromrun(f"220928_A00626_0506_AHGFY2DRX2"),
        pu=lambda wildcards: f"220928_A00626_0506_AHGFY2DRX2.{wildcards.pref}",
        sm=lambda wildcards: f"{wildcards.pref}",
        pl="NextSeq500"
    output:
        "mapped/{pref}.bam"
    threads: 18
    resources: time_min=50000, mem_mb=25000, cpus=32
    shell:"""

       bwa mem -t 18 -M -R '@RG\\tID:{params.id}.{params.sm}\\tPL:{params.pl}\\tPU:{params.pu}\\tSM:{params.sm}\\tLB:{params.id}.{params.sm}\\tCN:COSR\\tSO:unsorted' {input.reference} {input.R1} {input.R2} | samtools view -Sb > {output}

       """





rule samtools_sort_map:
    input:
        "mapped/{pref}.bam"
    output:
        "sorted/{pref}_sorted.bam"
    resources: time_min = 5000, mem_mb=25000, cpus = 32
    shell:"""
        mkdir -p sorted
        samtools sort {input} -o {output}
        """


rule rmdup:
    input:
        "sorted/{pref}_sorted.bam"
    output:
        reads = "markdup/{pref}_markdup.bam",
        metrics = "markdup/{pref}_markdup_metrics.log"
    resources: time_min=5000, mem_mb=2500, cpus=36
    shell:"""
       mkdir -p markdup
       picard MarkDuplicates REMOVE_DUPLICATES=true\
       I={input} \
       O={output.reads} \
       M={output.metrics}
       """


rule rmdup_only_marked:
    input:
        "sorted/{pref}_sorted.bam"
    output:
        reads = "markdup/{pref}_markdup_only_marked.bam",
        metrics = "markdup/{pref}_markdup_metrics.log"
    resources: time_min=5000, mem_mb=2500, cpus=36
    shell:"""
       mkdir -p markdup
       picard MarkDuplicates REMOVE_DUPLICATES=false\
       I={input} \
       O={output.reads} \
       M={output.metrics}
       """


rule samtools_sort:
    input:
        "markdup/{pref}_markdup.bam"
    output:
        "sorted/{pref}_markdup.bam"
    resources: time_min = 5000, mem_mb=25000, cpus = 32
    shell:"""
        mkdir -p sorted
        samtools sort {input} -o {output}
        """

rule samtools_sort_only_marked:
    input:
        "markdup/{pref}_markdup_only_marked.bam"
    output:
        "sorted/{pref}_markdup_only_marked.bam"
    resources: time_min = 5000, mem_mb=25000, cpus = 32
    shell:"""
        mkdir -p sorted
        samtools sort {input} -o {output}
        """

rule bTs:
    input:
        "sorted/{pref}_markdup.bam"
    output:
       "sorted/{pref}_markdup.sam"
    #threads: 36
    resources: time_min=5000, mem_mb=2500, cpus=36
    shell:"""
       samtools view  {input}  > {output}
       """


rule samtools_index:
    input:
        BAM = "sorted/{pref}_markdup.bam"
    output:
        "sorted/{pref}_markdup.bam.bai"
    resources: time_min = 500, mem_mb=2500, cpus = 16
    shell:"""
        samtools index {input.BAM}
        touch {output}
        """

rule samtools_index_only_marked:
    input:
        BAM = "sorted/{pref}_markdup_only_marked.bam"
    output:
        "sorted/{pref}_markdup_only_marked.bam.bai"
    resources: time_min = 500, mem_mb=2500, cpus = 16
    shell:"""
        samtools index {input.BAM}
        touch {output}
        """


rule bTb:
    input:
        BAM = "sorted/{pref}_markdup.bam",
        SAM = "sorted/{pref}_markdup.sam"
    output:
        "bed/{pref}_markdup.bed"
    resources: time_min = 5000, mem_mb=2500, cpus = 16
    shell:"""
        mkdir -p bed
        bamToBed -i {input.BAM} > {output}
        """


rule qualimap:
    input:
        "sorted/{pref}_markdup_only_marked.bam"
    output:
        directory("qualimap/{pref}")
    resources: time_min = 50000, mem_mb=50000, cpus = 32
    shell:"""
        mkdir -p "qualimap/{wildcards.pref}"
        qualimap --java-mem-size=50000M  bamqc -c -bam {input} -outdir {output} 
        """



rule CONTROL_FREEC:
    input:
        BAM_T = "sorted/{pat}_DNA_markdup.bam",
        BAM_N = "sorted/{pat}_NORM_DNA_markdup.bam"
    output:
        ratio = "CF/{pat}/{pat}_DNA_markdup.bam_ratio.txt",
        CNVs =  "CF/{pat}/{pat}_DNA_markdup.bam_CNVs",
        number = "CF/{pat}/number_of_cnvs_in_{pat}"
    resources: time_min = 50000, mem_mb=128000, cpus = 72
    shell:"""
        mkdir -p CF/{wildcards.pat}
        sed "s#CFdir#{wildcards.pat}#g" CF_config_control.txt > CF/config_{wildcards.pat}.txt
        freec -conf CF/config_{wildcards.pat}.txt -sample {input.BAM_T} -control {input.BAM_N}|| true
        wc -l CF/{wildcards.pat}/{wildcards.pat}_DNA_markdup.bam_CNVs > {output.number} || true
        touch CF/{wildcards.pat}/{wildcards.pat}_DNA_markdup.bam_ratio.txt
        touch CF/{wildcards.pat}/{wildcards.pat}_DNA_markdup.bam_CNVs
        """


rule CONTROL_FREEC_stat:
    input:
        ratio = "CF/{pat}/{pat}_DNA_markdup.bam_ratio.txt",
        CNVs =  "CF/{pat}/{pat}_DNA_markdup.bam_CNVs",
        number = "CF/{pat}/number_of_cnvs_in_{pat}"
    output:
        PV = "CF/{pat}/{pat}_DNA_markdup.bam_CNVs.p.value.txt",
        PV_filtered = "CF/{pat}/{pat}_DNA_markdup.bam_CNVs.p.value.filtered.txt"
    resources: time_min = 50000, mem_mb=128000, cpus = 16
    shell:"""
        if [ `cat {input.CNVs} | wc -l` -gt 0 ] ; then
            cat assess_significance.R | R --slave --args {input.CNVs} {input.ratio}
            touch {output.PV}
            awk '$6 < 0.01' {output.PV} | awk '$7 < 0.01' > {output.PV_filtered}
            sed -i "1 i\CNVchr  CNVstart        CNVend  copy_number     status  WilcoxonRankSumTestPvalue       KolmogorovSmirnovPvalue" {output.PV_filtered}
        else
            touch {output.PV}
            touch {output.PV_filtered}
            echo "CNVchr  CNVstart        CNVend  copy_number     status  WilcoxonRankSumTestPvalue       KolmogorovSmirnovPvalue" >> {output.PV_filtered}
        fi
        """



rule CONTROL_FREEC_plot:
    input:
        PV_filtered = "CF/{pat}/{pat}_DNA_markdup.bam_CNVs.p.value.filtered.txt",
    output:
        "CF/{pat}/plot_CNV_{pat}.pdf"
    resources: time_min = 50000, mem_mb=128000, cpus = 16
    shell:"""
        bash -c '
        . $HOME/.bashrc
        conda activate PLOT
        if [ `cat {input.PV_filtered} | wc -l` -gt 1 ] ; then
            cat plot.R | R --slave --args {input.PV_filtered} {output} {wildcards.pat}
            rm "CF/{wildcards.pat}/number_of_cnvs_in_{wildcards.pat}"
        else
            touch {output}
            rm "CF/{wildcards.pat}/number_of_cnvs_in_{wildcards.pat}"
            touch "CF/{wildcards.pat}/number_of_filtered_cnvs_in_{wildcards.pat}"
        fi
        conda deactivate'
        """


#rule CONTROL_FREEC_plot_flat_logratio:
#    input:
#        PV_filtered = "CF/{pat}/{pat}_DNA_markdup.bam_CNVs.p.value.filtered.txt",
#        ratio = "CF/{pat}/{pat}_DNA_markdup.bam_ratio.txt"
#    output:
#        "CF/{pat}/plot_CNV_flat_logratio_{pat}.pdf"
#    resources: time_min = 50000, mem_mb=128000, cpus = 16
#    shell:"""
#        bash -c '
#        . $HOME/.bashrc
#        conda activate PLOT
#        if [ `cat {input.PV_filtered} | wc -l` -gt 1 ] ; then
#            cat plot_flat_ratio.R | R --slave --args {input.ratio} {input.PV_filtered} {output} {wildcards.pat}
#            rm "CF/{wildcards.pat}/number_of_cnvs_in_{wildcards.pat}"
#        else
#            touch {output}
#            rm "CF/{wildcards.pat}/number_of_cnvs_in_{wildcards.pat}"
#            touch "CF/{wildcards.pat}/number_of_filtered_cnvs_in_{wildcards.pat}"
#        fi
#        conda deactivate'
#        """




rule kp_info:
    input:
        PV_filtered = "CF/{pref}/{pref}_markdup.bam_CNVs.p.value.filtered.txt",
        ratio = "CF/{pref}/{pref}_markdup.bam_ratio.txt"
    output:
       txt = "CF/{pref}/{pref}_calls.txt",
       pdf = "CF/{pat}/plot_CNV_flat_logratio_{pat}.pdf"
    resources: time_min = 50000, mem_mb=12800, cpus = 16
    shell:"""
        bash -c '
        . $HOME/.bashrc
        conda activate PLOT
        if [ `cat {input.PV_filtered} | wc -l` -gt 1 ] ; then
            cat plot_flat_ratio.R | R --slave --args {input.ratio} {input.PV_filtered} {output.txt} {output.pdf} {wildcards.pat}
            rm "CF/{wildcards.pref}/number_of_cnvs_in_{wildcards.pref}"
        else
            touch {output}
        fi
        conda deactivate'
        """



rule Gini:
    input:
        PV_filtered = "CF/{pref}/{pref}_markdup.bam_sample.cpn",
    output:
        plot = "CF/{pref}/plot_Lc_{pref}.pdf",
        file = "CF/{pref}/gini_{pref}.txt"
    resources: time_min = 50000, mem_mb=128000, cpus = 16
    shell:"""
        bash -c '
        . $HOME/.bashrc
        conda activate PLOT
            touch {output.plot}
            touch {output.file}
            cat /beegfs/scratch/ric.cosr/ric.cosr/Menarini/gini.R | R --slave --args {input.PV_filtered} {output.plot} {output.file} {wildcards.pref}
        conda deactivate'
        """

# prepare input for gistic
rule freec2bed:
    input:
        ratio = "CF/{pref}/{pref}_markdup.bam_ratio.txt"
    output:
        "CF/bed/{pref}_freec_segments.bed"
    resources: time_min = 50000, mem_mb=12800, cpus = 16
    shell:"""
        mkdir -p "CF/bed"
        freec2bed.pl -f {input.ratio} > {output}
        """

#prepare input for gistic
rule copy_files:
    input:
        cpn = "CF/{pref}/{pref}_markdup.bam_sample.cpn"
    output:
        "CF/cpn/{pref}_markdup.bam_sample.cpn"
    resources: time_min = 50000, mem_mb=12800, cpus = 16
    shell:"""
        mkdir -p "CF/cpn"
        cp {input.cpn} {output}
        """

rule MQC:
    params:
        qualimap = "qualimap/",
        QC = "qc/",
        PICARD = "markdup/"
    output: "MQC.done"
    resources: time_min = 5000, mem_mb=12800, cpus = 16
    shell:"""
       multiqc {params.QC} {params.PICARD} {params.qualimap}
       touch {output}
       """
